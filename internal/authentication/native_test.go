package authentication

import (
	"bytes"
	"crypto/ecdsa"
	"crypto/elliptic"
	"math/big"
	"testing"
)

func testPrivateKey(t *testing.T) *ecdsa.PrivateKey {
	curve := elliptic.P256()
	// PEM private key:
	/*
		-----BEGIN EC PRIVATE KEY-----
		MHcCAQEEID4g2PCwyt3QlwqzY0LF3D8KPVZ3iDyyYO1s6zrtkyDEoAoGCCqGSM49
		AwEHoUQDQgAExP9FuWjodGmvZI7TTDSpNNdKHXbyctFT/IERTd/swXj2iOYr7BnJ
		sUTpQVNh+k/sq13tQzYza5dRyaeP+icPrg==
		-----END EC PRIVATE KEY-----
	*/
	privateScalar := []byte{
		0x3e, 0x20, 0xd8, 0xf0, 0xb0, 0xca, 0xdd, 0xd0, 0x97, 0x0a, 0xb3, 0x63,
		0x42, 0xc5, 0xdc, 0x3f, 0x0a, 0x3d, 0x56, 0x77, 0x88, 0x3c, 0xb2, 0x60,
		0xed, 0x6c, 0xeb, 0x3a, 0xed, 0x93, 0x20, 0xc4,
	}
	privateKey := ecdsa.PrivateKey{
		D: big.NewInt(0),
	}
	privateKey.D.SetBytes(privateScalar)
	privateKey.PublicKey.X, privateKey.PublicKey.Y = curve.ScalarBaseMult(privateScalar)
	if !curve.IsOnCurve(privateKey.PublicKey.X, privateKey.PublicKey.Y) {
		t.Fatalf("Failed to load test key")
	}
	return &privateKey
}

func TestLocalPublicBytes(t *testing.T) {
	encodedPublicKey := []byte{
		0x04, 0xc4, 0xff, 0x45, 0xb9, 0x68, 0xe8, 0x74, 0x69, 0xaf, 0x64, 0x8e,
		0xd3, 0x4c, 0x34, 0xa9, 0x34, 0xd7, 0x4a, 0x1d, 0x76, 0xf2, 0x72, 0xd1,
		0x53, 0xfc, 0x81, 0x11, 0x4d, 0xdf, 0xec, 0xc1, 0x78, 0xf6, 0x88, 0xe6,
		0x2b, 0xec, 0x19, 0xc9, 0xb1, 0x44, 0xe9, 0x41, 0x53, 0x61, 0xfa, 0x4f,
		0xec, 0xab, 0x5d, 0xed, 0x43, 0x36, 0x33, 0x6b, 0x97, 0x51, 0xc9, 0xa7,
		0x8f, 0xfa, 0x27, 0x0f, 0xae,
	}
	skey := testPrivateKey(t)
	x, y := elliptic.Unmarshal(elliptic.P256(), encodedPublicKey)
	if x.Cmp(skey.PublicKey.X) != 0 || y.Cmp(skey.PublicKey.Y) != 0 {
		t.Errorf("Unexpected public key")
	}
	if !bytes.Equal(encodedPublicKey, elliptic.Marshal(elliptic.P256(), skey.PublicKey.X, skey.PublicKey.Y)) {
		t.Errorf("Mismatch on serialized public key")
	}
}

func TestSharedSecretPadding(t *testing.T) {
	encodedPublicKey := []byte{
		0x04, 0xc4, 0xff, 0x45, 0xb9, 0x68, 0xe8, 0x74, 0x69, 0xaf, 0x64, 0x8e,
		0xd3, 0x4c, 0x34, 0xa9, 0x34, 0xd7, 0x4a, 0x1d, 0x76, 0xf2, 0x72, 0xd1,
		0x53, 0xfc, 0x81, 0x11, 0x4d, 0xdf, 0xec, 0xc1, 0x78, 0xf6, 0x88, 0xe6,
		0x2b, 0xec, 0x19, 0xc9, 0xb1, 0x44, 0xe9, 0x41, 0x53, 0x61, 0xfa, 0x4f,
		0xec, 0xab, 0x5d, 0xed, 0x43, 0x36, 0x33, 0x6b, 0x97, 0x51, 0xc9, 0xa7,
		0x8f, 0xfa, 0x27, 0x0f, 0xae,
	}
	pX, pY := elliptic.Unmarshal(elliptic.P256(), encodedPublicKey)
	scalar := make([]byte, 32)
	scalar[30] = 0x01
	scalar[31] = 0x3f

	x, _ := elliptic.P256().ScalarMult(pX, pY, scalar)
	if x == nil {
		t.Fatalf("Failed to produce shared secret")
	}
	sharedX := x.Bytes()
	if len(sharedX) >= 32 {
		t.Fatalf("Bad test --- requires x coordinate that can be encoded in fewer than 32 bytes")
	}

	skey := UnmarshalECDHPrivateKey(scalar).(*NativeECDHKey)
	secret, err := skey.sharedSecret(encodedPublicKey)
	if err != nil {
		t.Fatal(err)
	}
	if !bytes.Equal(secret[1:], sharedX) || secret[0] != 0x00 {
		t.Errorf("%02x\n%02x", secret, sharedX)
	}
}
