// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/proxy/proxy.go
//
// Generated by this command:
//
//	mockgen -source=pkg/proxy/proxy.go -destination mocks/proxy.go -package=mocks -mock_names Vehicle=ProxyVehicle,Account=ProxyAccount
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	authentication "github.com/teslamotors/vehicle-command/internal/authentication"
	cache "github.com/teslamotors/vehicle-command/pkg/cache"
	universalmessage "github.com/teslamotors/vehicle-command/pkg/protocol/protobuf/universalmessage"
	proxy "github.com/teslamotors/vehicle-command/pkg/proxy"
	gomock "go.uber.org/mock/gomock"
)

// ProxyVehicle is a mock of Vehicle interface.
type ProxyVehicle struct {
	ctrl     *gomock.Controller
	recorder *ProxyVehicleMockRecorder
}

// ProxyVehicleMockRecorder is the mock recorder for ProxyVehicle.
type ProxyVehicleMockRecorder struct {
	mock *ProxyVehicle
}

// NewProxyVehicle creates a new mock instance.
func NewProxyVehicle(ctrl *gomock.Controller) *ProxyVehicle {
	mock := &ProxyVehicle{ctrl: ctrl}
	mock.recorder = &ProxyVehicleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ProxyVehicle) EXPECT() *ProxyVehicleMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *ProxyVehicle) Connect(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect.
func (mr *ProxyVehicleMockRecorder) Connect(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*ProxyVehicle)(nil).Connect), arg0)
}

// Disconnect mocks base method.
func (m *ProxyVehicle) Disconnect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnect")
}

// Disconnect indicates an expected call of Disconnect.
func (mr *ProxyVehicleMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*ProxyVehicle)(nil).Disconnect))
}

// ExecuteAction mocks base method.
func (m *ProxyVehicle) ExecuteAction(arg0 context.Context, arg1 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteAction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteAction indicates an expected call of ExecuteAction.
func (mr *ProxyVehicleMockRecorder) ExecuteAction(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteAction", reflect.TypeOf((*ProxyVehicle)(nil).ExecuteAction), arg0, arg1)
}

// StartSession mocks base method.
func (m *ProxyVehicle) StartSession(arg0 context.Context, arg1 []universalmessage.Domain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartSession", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartSession indicates an expected call of StartSession.
func (mr *ProxyVehicleMockRecorder) StartSession(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartSession", reflect.TypeOf((*ProxyVehicle)(nil).StartSession), arg0, arg1)
}

// UpdateCachedSessions mocks base method.
func (m *ProxyVehicle) UpdateCachedSessions(arg0 *cache.SessionCache) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCachedSessions", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCachedSessions indicates an expected call of UpdateCachedSessions.
func (mr *ProxyVehicleMockRecorder) UpdateCachedSessions(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCachedSessions", reflect.TypeOf((*ProxyVehicle)(nil).UpdateCachedSessions), arg0)
}

// ProxyAccount is a mock of Account interface.
type ProxyAccount struct {
	ctrl     *gomock.Controller
	recorder *ProxyAccountMockRecorder
}

// ProxyAccountMockRecorder is the mock recorder for ProxyAccount.
type ProxyAccountMockRecorder struct {
	mock *ProxyAccount
}

// NewProxyAccount creates a new mock instance.
func NewProxyAccount(ctrl *gomock.Controller) *ProxyAccount {
	mock := &ProxyAccount{ctrl: ctrl}
	mock.recorder = &ProxyAccountMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *ProxyAccount) EXPECT() *ProxyAccountMockRecorder {
	return m.recorder
}

// GetHost mocks base method.
func (m *ProxyAccount) GetHost() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHost")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetHost indicates an expected call of GetHost.
func (mr *ProxyAccountMockRecorder) GetHost() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHost", reflect.TypeOf((*ProxyAccount)(nil).GetHost))
}

// GetVehicle mocks base method.
func (m *ProxyAccount) GetVehicle(arg0 context.Context, arg1 string, arg2 authentication.ECDHPrivateKey, arg3 *cache.SessionCache) (proxy.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehicle", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(proxy.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehicle indicates an expected call of GetVehicle.
func (mr *ProxyAccountMockRecorder) GetVehicle(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicle", reflect.TypeOf((*ProxyAccount)(nil).GetVehicle), arg0, arg1, arg2, arg3)
}
