// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: car_server.proto

package carserver

import (
	signatures "github.com/teslamotors/vehicle-command/pkg/protocol/protobuf/signatures"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OperationStatus_E int32

const (
	OperationStatus_E_OPERATIONSTATUS_OK    OperationStatus_E = 0
	OperationStatus_E_OPERATIONSTATUS_ERROR OperationStatus_E = 1
)

// Enum value maps for OperationStatus_E.
var (
	OperationStatus_E_name = map[int32]string{
		0: "OPERATIONSTATUS_OK",
		1: "OPERATIONSTATUS_ERROR",
	}
	OperationStatus_E_value = map[string]int32{
		"OPERATIONSTATUS_OK":    0,
		"OPERATIONSTATUS_ERROR": 1,
	}
)

func (x OperationStatus_E) Enum() *OperationStatus_E {
	p := new(OperationStatus_E)
	*p = x
	return p
}

func (x OperationStatus_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationStatus_E) Descriptor() protoreflect.EnumDescriptor {
	return file_car_server_proto_enumTypes[0].Descriptor()
}

func (OperationStatus_E) Type() protoreflect.EnumType {
	return &file_car_server_proto_enumTypes[0]
}

func (x OperationStatus_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationStatus_E.Descriptor instead.
func (OperationStatus_E) EnumDescriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{0}
}

type HvacSeatCoolerActions_HvacSeatCoolerLevel_E int32

const (
	HvacSeatCoolerActions_HvacSeatCoolerLevel_Unknown HvacSeatCoolerActions_HvacSeatCoolerLevel_E = 0
	HvacSeatCoolerActions_HvacSeatCoolerLevel_Off     HvacSeatCoolerActions_HvacSeatCoolerLevel_E = 1
	HvacSeatCoolerActions_HvacSeatCoolerLevel_Low     HvacSeatCoolerActions_HvacSeatCoolerLevel_E = 2
	HvacSeatCoolerActions_HvacSeatCoolerLevel_Med     HvacSeatCoolerActions_HvacSeatCoolerLevel_E = 3
	HvacSeatCoolerActions_HvacSeatCoolerLevel_High    HvacSeatCoolerActions_HvacSeatCoolerLevel_E = 4
)

// Enum value maps for HvacSeatCoolerActions_HvacSeatCoolerLevel_E.
var (
	HvacSeatCoolerActions_HvacSeatCoolerLevel_E_name = map[int32]string{
		0: "HvacSeatCoolerLevel_Unknown",
		1: "HvacSeatCoolerLevel_Off",
		2: "HvacSeatCoolerLevel_Low",
		3: "HvacSeatCoolerLevel_Med",
		4: "HvacSeatCoolerLevel_High",
	}
	HvacSeatCoolerActions_HvacSeatCoolerLevel_E_value = map[string]int32{
		"HvacSeatCoolerLevel_Unknown": 0,
		"HvacSeatCoolerLevel_Off":     1,
		"HvacSeatCoolerLevel_Low":     2,
		"HvacSeatCoolerLevel_Med":     3,
		"HvacSeatCoolerLevel_High":    4,
	}
)

func (x HvacSeatCoolerActions_HvacSeatCoolerLevel_E) Enum() *HvacSeatCoolerActions_HvacSeatCoolerLevel_E {
	p := new(HvacSeatCoolerActions_HvacSeatCoolerLevel_E)
	*p = x
	return p
}

func (x HvacSeatCoolerActions_HvacSeatCoolerLevel_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HvacSeatCoolerActions_HvacSeatCoolerLevel_E) Descriptor() protoreflect.EnumDescriptor {
	return file_car_server_proto_enumTypes[1].Descriptor()
}

func (HvacSeatCoolerActions_HvacSeatCoolerLevel_E) Type() protoreflect.EnumType {
	return &file_car_server_proto_enumTypes[1]
}

func (x HvacSeatCoolerActions_HvacSeatCoolerLevel_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HvacSeatCoolerActions_HvacSeatCoolerLevel_E.Descriptor instead.
func (HvacSeatCoolerActions_HvacSeatCoolerLevel_E) EnumDescriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{14, 0}
}

type HvacSeatCoolerActions_HvacSeatCoolerPosition_E int32

const (
	HvacSeatCoolerActions_HvacSeatCoolerPosition_Unknown    HvacSeatCoolerActions_HvacSeatCoolerPosition_E = 0
	HvacSeatCoolerActions_HvacSeatCoolerPosition_FrontLeft  HvacSeatCoolerActions_HvacSeatCoolerPosition_E = 1
	HvacSeatCoolerActions_HvacSeatCoolerPosition_FrontRight HvacSeatCoolerActions_HvacSeatCoolerPosition_E = 2
)

// Enum value maps for HvacSeatCoolerActions_HvacSeatCoolerPosition_E.
var (
	HvacSeatCoolerActions_HvacSeatCoolerPosition_E_name = map[int32]string{
		0: "HvacSeatCoolerPosition_Unknown",
		1: "HvacSeatCoolerPosition_FrontLeft",
		2: "HvacSeatCoolerPosition_FrontRight",
	}
	HvacSeatCoolerActions_HvacSeatCoolerPosition_E_value = map[string]int32{
		"HvacSeatCoolerPosition_Unknown":    0,
		"HvacSeatCoolerPosition_FrontLeft":  1,
		"HvacSeatCoolerPosition_FrontRight": 2,
	}
)

func (x HvacSeatCoolerActions_HvacSeatCoolerPosition_E) Enum() *HvacSeatCoolerActions_HvacSeatCoolerPosition_E {
	p := new(HvacSeatCoolerActions_HvacSeatCoolerPosition_E)
	*p = x
	return p
}

func (x HvacSeatCoolerActions_HvacSeatCoolerPosition_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HvacSeatCoolerActions_HvacSeatCoolerPosition_E) Descriptor() protoreflect.EnumDescriptor {
	return file_car_server_proto_enumTypes[2].Descriptor()
}

func (HvacSeatCoolerActions_HvacSeatCoolerPosition_E) Type() protoreflect.EnumType {
	return &file_car_server_proto_enumTypes[2]
}

func (x HvacSeatCoolerActions_HvacSeatCoolerPosition_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HvacSeatCoolerActions_HvacSeatCoolerPosition_E.Descriptor instead.
func (HvacSeatCoolerActions_HvacSeatCoolerPosition_E) EnumDescriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{14, 1}
}

type HvacSetPreconditioningMaxAction_ManualOverrideMode_E int32

const (
	HvacSetPreconditioningMaxAction_DogMode HvacSetPreconditioningMaxAction_ManualOverrideMode_E = 0
	HvacSetPreconditioningMaxAction_Soc     HvacSetPreconditioningMaxAction_ManualOverrideMode_E = 1
	HvacSetPreconditioningMaxAction_Doors   HvacSetPreconditioningMaxAction_ManualOverrideMode_E = 2
)

// Enum value maps for HvacSetPreconditioningMaxAction_ManualOverrideMode_E.
var (
	HvacSetPreconditioningMaxAction_ManualOverrideMode_E_name = map[int32]string{
		0: "DogMode",
		1: "Soc",
		2: "Doors",
	}
	HvacSetPreconditioningMaxAction_ManualOverrideMode_E_value = map[string]int32{
		"DogMode": 0,
		"Soc":     1,
		"Doors":   2,
	}
)

func (x HvacSetPreconditioningMaxAction_ManualOverrideMode_E) Enum() *HvacSetPreconditioningMaxAction_ManualOverrideMode_E {
	p := new(HvacSetPreconditioningMaxAction_ManualOverrideMode_E)
	*p = x
	return p
}

func (x HvacSetPreconditioningMaxAction_ManualOverrideMode_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HvacSetPreconditioningMaxAction_ManualOverrideMode_E) Descriptor() protoreflect.EnumDescriptor {
	return file_car_server_proto_enumTypes[3].Descriptor()
}

func (HvacSetPreconditioningMaxAction_ManualOverrideMode_E) Type() protoreflect.EnumType {
	return &file_car_server_proto_enumTypes[3]
}

func (x HvacSetPreconditioningMaxAction_ManualOverrideMode_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HvacSetPreconditioningMaxAction_ManualOverrideMode_E.Descriptor instead.
func (HvacSetPreconditioningMaxAction_ManualOverrideMode_E) EnumDescriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{15, 0}
}

type AutoSeatClimateAction_AutoSeatPosition_E int32

const (
	AutoSeatClimateAction_AutoSeatPosition_Unknown    AutoSeatClimateAction_AutoSeatPosition_E = 0
	AutoSeatClimateAction_AutoSeatPosition_FrontLeft  AutoSeatClimateAction_AutoSeatPosition_E = 1
	AutoSeatClimateAction_AutoSeatPosition_FrontRight AutoSeatClimateAction_AutoSeatPosition_E = 2
)

// Enum value maps for AutoSeatClimateAction_AutoSeatPosition_E.
var (
	AutoSeatClimateAction_AutoSeatPosition_E_name = map[int32]string{
		0: "AutoSeatPosition_Unknown",
		1: "AutoSeatPosition_FrontLeft",
		2: "AutoSeatPosition_FrontRight",
	}
	AutoSeatClimateAction_AutoSeatPosition_E_value = map[string]int32{
		"AutoSeatPosition_Unknown":    0,
		"AutoSeatPosition_FrontLeft":  1,
		"AutoSeatPosition_FrontRight": 2,
	}
)

func (x AutoSeatClimateAction_AutoSeatPosition_E) Enum() *AutoSeatClimateAction_AutoSeatPosition_E {
	p := new(AutoSeatClimateAction_AutoSeatPosition_E)
	*p = x
	return p
}

func (x AutoSeatClimateAction_AutoSeatPosition_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AutoSeatClimateAction_AutoSeatPosition_E) Descriptor() protoreflect.EnumDescriptor {
	return file_car_server_proto_enumTypes[4].Descriptor()
}

func (AutoSeatClimateAction_AutoSeatPosition_E) Type() protoreflect.EnumType {
	return &file_car_server_proto_enumTypes[4]
}

func (x AutoSeatClimateAction_AutoSeatPosition_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AutoSeatClimateAction_AutoSeatPosition_E.Descriptor instead.
func (AutoSeatClimateAction_AutoSeatPosition_E) EnumDescriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{38, 0}
}

type HvacClimateKeeperAction_ClimateKeeperAction_E int32

const (
	HvacClimateKeeperAction_ClimateKeeperAction_Off  HvacClimateKeeperAction_ClimateKeeperAction_E = 0
	HvacClimateKeeperAction_ClimateKeeperAction_On   HvacClimateKeeperAction_ClimateKeeperAction_E = 1
	HvacClimateKeeperAction_ClimateKeeperAction_Dog  HvacClimateKeeperAction_ClimateKeeperAction_E = 2
	HvacClimateKeeperAction_ClimateKeeperAction_Camp HvacClimateKeeperAction_ClimateKeeperAction_E = 3
)

// Enum value maps for HvacClimateKeeperAction_ClimateKeeperAction_E.
var (
	HvacClimateKeeperAction_ClimateKeeperAction_E_name = map[int32]string{
		0: "ClimateKeeperAction_Off",
		1: "ClimateKeeperAction_On",
		2: "ClimateKeeperAction_Dog",
		3: "ClimateKeeperAction_Camp",
	}
	HvacClimateKeeperAction_ClimateKeeperAction_E_value = map[string]int32{
		"ClimateKeeperAction_Off":  0,
		"ClimateKeeperAction_On":   1,
		"ClimateKeeperAction_Dog":  2,
		"ClimateKeeperAction_Camp": 3,
	}
)

func (x HvacClimateKeeperAction_ClimateKeeperAction_E) Enum() *HvacClimateKeeperAction_ClimateKeeperAction_E {
	p := new(HvacClimateKeeperAction_ClimateKeeperAction_E)
	*p = x
	return p
}

func (x HvacClimateKeeperAction_ClimateKeeperAction_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HvacClimateKeeperAction_ClimateKeeperAction_E) Descriptor() protoreflect.EnumDescriptor {
	return file_car_server_proto_enumTypes[5].Descriptor()
}

func (HvacClimateKeeperAction_ClimateKeeperAction_E) Type() protoreflect.EnumType {
	return &file_car_server_proto_enumTypes[5]
}

func (x HvacClimateKeeperAction_ClimateKeeperAction_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HvacClimateKeeperAction_ClimateKeeperAction_E.Descriptor instead.
func (HvacClimateKeeperAction_ClimateKeeperAction_E) EnumDescriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{42, 0}
}

type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ActionMsg:
	//
	//	*Action_VehicleAction
	ActionMsg isAction_ActionMsg `protobuf_oneof:"action_msg"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{0}
}

func (m *Action) GetActionMsg() isAction_ActionMsg {
	if m != nil {
		return m.ActionMsg
	}
	return nil
}

func (x *Action) GetVehicleAction() *VehicleAction {
	if x, ok := x.GetActionMsg().(*Action_VehicleAction); ok {
		return x.VehicleAction
	}
	return nil
}

type isAction_ActionMsg interface {
	isAction_ActionMsg()
}

type Action_VehicleAction struct {
	VehicleAction *VehicleAction `protobuf:"bytes,2,opt,name=vehicleAction,proto3,oneof"`
}

func (*Action_VehicleAction) isAction_ActionMsg() {}

type VehicleAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to VehicleActionMsg:
	//
	//	*VehicleAction_ChargingSetLimitAction
	//	*VehicleAction_ChargingStartStopAction
	//	*VehicleAction_DrivingClearSpeedLimitPinAction
	//	*VehicleAction_DrivingSetSpeedLimitAction
	//	*VehicleAction_DrivingSpeedLimitAction
	//	*VehicleAction_HvacAutoAction
	//	*VehicleAction_HvacSetPreconditioningMaxAction
	//	*VehicleAction_HvacSteeringWheelHeaterAction
	//	*VehicleAction_HvacTemperatureAdjustmentAction
	//	*VehicleAction_MediaPlayAction
	//	*VehicleAction_MediaUpdateVolume
	//	*VehicleAction_MediaNextFavorite
	//	*VehicleAction_MediaPreviousFavorite
	//	*VehicleAction_MediaNextTrack
	//	*VehicleAction_MediaPreviousTrack
	//	*VehicleAction_GetNearbyChargingSites
	//	*VehicleAction_VehicleControlCancelSoftwareUpdateAction
	//	*VehicleAction_VehicleControlFlashLightsAction
	//	*VehicleAction_VehicleControlHonkHornAction
	//	*VehicleAction_VehicleControlResetValetPinAction
	//	*VehicleAction_VehicleControlScheduleSoftwareUpdateAction
	//	*VehicleAction_VehicleControlSetSentryModeAction
	//	*VehicleAction_VehicleControlSetValetModeAction
	//	*VehicleAction_VehicleControlSunroofOpenCloseAction
	//	*VehicleAction_VehicleControlTriggerHomelinkAction
	//	*VehicleAction_VehicleControlWindowAction
	//	*VehicleAction_HvacBioweaponModeAction
	//	*VehicleAction_HvacSeatHeaterActions
	//	*VehicleAction_ScheduledChargingAction
	//	*VehicleAction_ScheduledDepartureAction
	//	*VehicleAction_SetChargingAmpsAction
	//	*VehicleAction_HvacClimateKeeperAction
	//	*VehicleAction_Ping
	//	*VehicleAction_AutoSeatClimateAction
	//	*VehicleAction_HvacSeatCoolerActions
	//	*VehicleAction_SetCabinOverheatProtectionAction
	//	*VehicleAction_SetVehicleNameAction
	//	*VehicleAction_ChargePortDoorClose
	//	*VehicleAction_ChargePortDoorOpen
	//	*VehicleAction_GuestModeAction
	//	*VehicleAction_SetCopTempAction
	//	*VehicleAction_EraseUserDataAction
	//	*VehicleAction_VehicleControlSetPinToDriveAction
	//	*VehicleAction_VehicleControlResetPinToDriveAction
	//	*VehicleAction_AddChargeScheduleAction
	//	*VehicleAction_RemoveChargeScheduleAction
	//	*VehicleAction_AddPreconditionScheduleAction
	//	*VehicleAction_RemovePreconditionScheduleAction
	//	*VehicleAction_BatchRemovePreconditionSchedulesAction
	//	*VehicleAction_BatchRemoveChargeSchedulesAction
	VehicleActionMsg isVehicleAction_VehicleActionMsg `protobuf_oneof:"vehicle_action_msg"`
}

func (x *VehicleAction) Reset() {
	*x = VehicleAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleAction) ProtoMessage() {}

func (x *VehicleAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleAction.ProtoReflect.Descriptor instead.
func (*VehicleAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{1}
}

func (m *VehicleAction) GetVehicleActionMsg() isVehicleAction_VehicleActionMsg {
	if m != nil {
		return m.VehicleActionMsg
	}
	return nil
}

func (x *VehicleAction) GetChargingSetLimitAction() *ChargingSetLimitAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_ChargingSetLimitAction); ok {
		return x.ChargingSetLimitAction
	}
	return nil
}

func (x *VehicleAction) GetChargingStartStopAction() *ChargingStartStopAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_ChargingStartStopAction); ok {
		return x.ChargingStartStopAction
	}
	return nil
}

func (x *VehicleAction) GetDrivingClearSpeedLimitPinAction() *DrivingClearSpeedLimitPinAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_DrivingClearSpeedLimitPinAction); ok {
		return x.DrivingClearSpeedLimitPinAction
	}
	return nil
}

func (x *VehicleAction) GetDrivingSetSpeedLimitAction() *DrivingSetSpeedLimitAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_DrivingSetSpeedLimitAction); ok {
		return x.DrivingSetSpeedLimitAction
	}
	return nil
}

func (x *VehicleAction) GetDrivingSpeedLimitAction() *DrivingSpeedLimitAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_DrivingSpeedLimitAction); ok {
		return x.DrivingSpeedLimitAction
	}
	return nil
}

func (x *VehicleAction) GetHvacAutoAction() *HvacAutoAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_HvacAutoAction); ok {
		return x.HvacAutoAction
	}
	return nil
}

func (x *VehicleAction) GetHvacSetPreconditioningMaxAction() *HvacSetPreconditioningMaxAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_HvacSetPreconditioningMaxAction); ok {
		return x.HvacSetPreconditioningMaxAction
	}
	return nil
}

func (x *VehicleAction) GetHvacSteeringWheelHeaterAction() *HvacSteeringWheelHeaterAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_HvacSteeringWheelHeaterAction); ok {
		return x.HvacSteeringWheelHeaterAction
	}
	return nil
}

func (x *VehicleAction) GetHvacTemperatureAdjustmentAction() *HvacTemperatureAdjustmentAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_HvacTemperatureAdjustmentAction); ok {
		return x.HvacTemperatureAdjustmentAction
	}
	return nil
}

func (x *VehicleAction) GetMediaPlayAction() *MediaPlayAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_MediaPlayAction); ok {
		return x.MediaPlayAction
	}
	return nil
}

func (x *VehicleAction) GetMediaUpdateVolume() *MediaUpdateVolume {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_MediaUpdateVolume); ok {
		return x.MediaUpdateVolume
	}
	return nil
}

func (x *VehicleAction) GetMediaNextFavorite() *MediaNextFavorite {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_MediaNextFavorite); ok {
		return x.MediaNextFavorite
	}
	return nil
}

func (x *VehicleAction) GetMediaPreviousFavorite() *MediaPreviousFavorite {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_MediaPreviousFavorite); ok {
		return x.MediaPreviousFavorite
	}
	return nil
}

func (x *VehicleAction) GetMediaNextTrack() *MediaNextTrack {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_MediaNextTrack); ok {
		return x.MediaNextTrack
	}
	return nil
}

func (x *VehicleAction) GetMediaPreviousTrack() *MediaPreviousTrack {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_MediaPreviousTrack); ok {
		return x.MediaPreviousTrack
	}
	return nil
}

func (x *VehicleAction) GetGetNearbyChargingSites() *GetNearbyChargingSites {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_GetNearbyChargingSites); ok {
		return x.GetNearbyChargingSites
	}
	return nil
}

func (x *VehicleAction) GetVehicleControlCancelSoftwareUpdateAction() *VehicleControlCancelSoftwareUpdateAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_VehicleControlCancelSoftwareUpdateAction); ok {
		return x.VehicleControlCancelSoftwareUpdateAction
	}
	return nil
}

func (x *VehicleAction) GetVehicleControlFlashLightsAction() *VehicleControlFlashLightsAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_VehicleControlFlashLightsAction); ok {
		return x.VehicleControlFlashLightsAction
	}
	return nil
}

func (x *VehicleAction) GetVehicleControlHonkHornAction() *VehicleControlHonkHornAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_VehicleControlHonkHornAction); ok {
		return x.VehicleControlHonkHornAction
	}
	return nil
}

func (x *VehicleAction) GetVehicleControlResetValetPinAction() *VehicleControlResetValetPinAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_VehicleControlResetValetPinAction); ok {
		return x.VehicleControlResetValetPinAction
	}
	return nil
}

func (x *VehicleAction) GetVehicleControlScheduleSoftwareUpdateAction() *VehicleControlScheduleSoftwareUpdateAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_VehicleControlScheduleSoftwareUpdateAction); ok {
		return x.VehicleControlScheduleSoftwareUpdateAction
	}
	return nil
}

func (x *VehicleAction) GetVehicleControlSetSentryModeAction() *VehicleControlSetSentryModeAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_VehicleControlSetSentryModeAction); ok {
		return x.VehicleControlSetSentryModeAction
	}
	return nil
}

func (x *VehicleAction) GetVehicleControlSetValetModeAction() *VehicleControlSetValetModeAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_VehicleControlSetValetModeAction); ok {
		return x.VehicleControlSetValetModeAction
	}
	return nil
}

func (x *VehicleAction) GetVehicleControlSunroofOpenCloseAction() *VehicleControlSunroofOpenCloseAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_VehicleControlSunroofOpenCloseAction); ok {
		return x.VehicleControlSunroofOpenCloseAction
	}
	return nil
}

func (x *VehicleAction) GetVehicleControlTriggerHomelinkAction() *VehicleControlTriggerHomelinkAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_VehicleControlTriggerHomelinkAction); ok {
		return x.VehicleControlTriggerHomelinkAction
	}
	return nil
}

func (x *VehicleAction) GetVehicleControlWindowAction() *VehicleControlWindowAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_VehicleControlWindowAction); ok {
		return x.VehicleControlWindowAction
	}
	return nil
}

func (x *VehicleAction) GetHvacBioweaponModeAction() *HvacBioweaponModeAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_HvacBioweaponModeAction); ok {
		return x.HvacBioweaponModeAction
	}
	return nil
}

func (x *VehicleAction) GetHvacSeatHeaterActions() *HvacSeatHeaterActions {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_HvacSeatHeaterActions); ok {
		return x.HvacSeatHeaterActions
	}
	return nil
}

func (x *VehicleAction) GetScheduledChargingAction() *ScheduledChargingAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_ScheduledChargingAction); ok {
		return x.ScheduledChargingAction
	}
	return nil
}

func (x *VehicleAction) GetScheduledDepartureAction() *ScheduledDepartureAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_ScheduledDepartureAction); ok {
		return x.ScheduledDepartureAction
	}
	return nil
}

func (x *VehicleAction) GetSetChargingAmpsAction() *SetChargingAmpsAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_SetChargingAmpsAction); ok {
		return x.SetChargingAmpsAction
	}
	return nil
}

func (x *VehicleAction) GetHvacClimateKeeperAction() *HvacClimateKeeperAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_HvacClimateKeeperAction); ok {
		return x.HvacClimateKeeperAction
	}
	return nil
}

func (x *VehicleAction) GetPing() *Ping {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_Ping); ok {
		return x.Ping
	}
	return nil
}

func (x *VehicleAction) GetAutoSeatClimateAction() *AutoSeatClimateAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_AutoSeatClimateAction); ok {
		return x.AutoSeatClimateAction
	}
	return nil
}

func (x *VehicleAction) GetHvacSeatCoolerActions() *HvacSeatCoolerActions {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_HvacSeatCoolerActions); ok {
		return x.HvacSeatCoolerActions
	}
	return nil
}

func (x *VehicleAction) GetSetCabinOverheatProtectionAction() *SetCabinOverheatProtectionAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_SetCabinOverheatProtectionAction); ok {
		return x.SetCabinOverheatProtectionAction
	}
	return nil
}

func (x *VehicleAction) GetSetVehicleNameAction() *SetVehicleNameAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_SetVehicleNameAction); ok {
		return x.SetVehicleNameAction
	}
	return nil
}

func (x *VehicleAction) GetChargePortDoorClose() *ChargePortDoorClose {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_ChargePortDoorClose); ok {
		return x.ChargePortDoorClose
	}
	return nil
}

func (x *VehicleAction) GetChargePortDoorOpen() *ChargePortDoorOpen {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_ChargePortDoorOpen); ok {
		return x.ChargePortDoorOpen
	}
	return nil
}

func (x *VehicleAction) GetGuestModeAction() *VehicleState_GuestMode {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_GuestModeAction); ok {
		return x.GuestModeAction
	}
	return nil
}

func (x *VehicleAction) GetSetCopTempAction() *SetCopTempAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_SetCopTempAction); ok {
		return x.SetCopTempAction
	}
	return nil
}

func (x *VehicleAction) GetEraseUserDataAction() *EraseUserDataAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_EraseUserDataAction); ok {
		return x.EraseUserDataAction
	}
	return nil
}

func (x *VehicleAction) GetVehicleControlSetPinToDriveAction() *VehicleControlSetPinToDriveAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_VehicleControlSetPinToDriveAction); ok {
		return x.VehicleControlSetPinToDriveAction
	}
	return nil
}

func (x *VehicleAction) GetVehicleControlResetPinToDriveAction() *VehicleControlResetPinToDriveAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_VehicleControlResetPinToDriveAction); ok {
		return x.VehicleControlResetPinToDriveAction
	}
	return nil
}

func (x *VehicleAction) GetAddChargeScheduleAction() *ChargeSchedule {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_AddChargeScheduleAction); ok {
		return x.AddChargeScheduleAction
	}
	return nil
}

func (x *VehicleAction) GetRemoveChargeScheduleAction() *RemoveChargeScheduleAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_RemoveChargeScheduleAction); ok {
		return x.RemoveChargeScheduleAction
	}
	return nil
}

func (x *VehicleAction) GetAddPreconditionScheduleAction() *PreconditionSchedule {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_AddPreconditionScheduleAction); ok {
		return x.AddPreconditionScheduleAction
	}
	return nil
}

func (x *VehicleAction) GetRemovePreconditionScheduleAction() *RemovePreconditionScheduleAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_RemovePreconditionScheduleAction); ok {
		return x.RemovePreconditionScheduleAction
	}
	return nil
}

func (x *VehicleAction) GetBatchRemovePreconditionSchedulesAction() *BatchRemovePreconditionSchedulesAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_BatchRemovePreconditionSchedulesAction); ok {
		return x.BatchRemovePreconditionSchedulesAction
	}
	return nil
}

func (x *VehicleAction) GetBatchRemoveChargeSchedulesAction() *BatchRemoveChargeSchedulesAction {
	if x, ok := x.GetVehicleActionMsg().(*VehicleAction_BatchRemoveChargeSchedulesAction); ok {
		return x.BatchRemoveChargeSchedulesAction
	}
	return nil
}

type isVehicleAction_VehicleActionMsg interface {
	isVehicleAction_VehicleActionMsg()
}

type VehicleAction_ChargingSetLimitAction struct {
	ChargingSetLimitAction *ChargingSetLimitAction `protobuf:"bytes,5,opt,name=chargingSetLimitAction,proto3,oneof"`
}

type VehicleAction_ChargingStartStopAction struct {
	ChargingStartStopAction *ChargingStartStopAction `protobuf:"bytes,6,opt,name=chargingStartStopAction,proto3,oneof"`
}

type VehicleAction_DrivingClearSpeedLimitPinAction struct {
	DrivingClearSpeedLimitPinAction *DrivingClearSpeedLimitPinAction `protobuf:"bytes,7,opt,name=drivingClearSpeedLimitPinAction,proto3,oneof"`
}

type VehicleAction_DrivingSetSpeedLimitAction struct {
	DrivingSetSpeedLimitAction *DrivingSetSpeedLimitAction `protobuf:"bytes,8,opt,name=drivingSetSpeedLimitAction,proto3,oneof"`
}

type VehicleAction_DrivingSpeedLimitAction struct {
	DrivingSpeedLimitAction *DrivingSpeedLimitAction `protobuf:"bytes,9,opt,name=drivingSpeedLimitAction,proto3,oneof"`
}

type VehicleAction_HvacAutoAction struct {
	HvacAutoAction *HvacAutoAction `protobuf:"bytes,10,opt,name=hvacAutoAction,proto3,oneof"`
}

type VehicleAction_HvacSetPreconditioningMaxAction struct {
	HvacSetPreconditioningMaxAction *HvacSetPreconditioningMaxAction `protobuf:"bytes,12,opt,name=hvacSetPreconditioningMaxAction,proto3,oneof"`
}

type VehicleAction_HvacSteeringWheelHeaterAction struct {
	HvacSteeringWheelHeaterAction *HvacSteeringWheelHeaterAction `protobuf:"bytes,13,opt,name=hvacSteeringWheelHeaterAction,proto3,oneof"`
}

type VehicleAction_HvacTemperatureAdjustmentAction struct {
	HvacTemperatureAdjustmentAction *HvacTemperatureAdjustmentAction `protobuf:"bytes,14,opt,name=hvacTemperatureAdjustmentAction,proto3,oneof"`
}

type VehicleAction_MediaPlayAction struct {
	MediaPlayAction *MediaPlayAction `protobuf:"bytes,15,opt,name=mediaPlayAction,proto3,oneof"`
}

type VehicleAction_MediaUpdateVolume struct {
	MediaUpdateVolume *MediaUpdateVolume `protobuf:"bytes,16,opt,name=mediaUpdateVolume,proto3,oneof"`
}

type VehicleAction_MediaNextFavorite struct {
	MediaNextFavorite *MediaNextFavorite `protobuf:"bytes,17,opt,name=mediaNextFavorite,proto3,oneof"`
}

type VehicleAction_MediaPreviousFavorite struct {
	MediaPreviousFavorite *MediaPreviousFavorite `protobuf:"bytes,18,opt,name=mediaPreviousFavorite,proto3,oneof"`
}

type VehicleAction_MediaNextTrack struct {
	MediaNextTrack *MediaNextTrack `protobuf:"bytes,19,opt,name=mediaNextTrack,proto3,oneof"`
}

type VehicleAction_MediaPreviousTrack struct {
	MediaPreviousTrack *MediaPreviousTrack `protobuf:"bytes,20,opt,name=mediaPreviousTrack,proto3,oneof"`
}

type VehicleAction_GetNearbyChargingSites struct {
	GetNearbyChargingSites *GetNearbyChargingSites `protobuf:"bytes,23,opt,name=getNearbyChargingSites,proto3,oneof"`
}

type VehicleAction_VehicleControlCancelSoftwareUpdateAction struct {
	VehicleControlCancelSoftwareUpdateAction *VehicleControlCancelSoftwareUpdateAction `protobuf:"bytes,25,opt,name=vehicleControlCancelSoftwareUpdateAction,proto3,oneof"`
}

type VehicleAction_VehicleControlFlashLightsAction struct {
	VehicleControlFlashLightsAction *VehicleControlFlashLightsAction `protobuf:"bytes,26,opt,name=vehicleControlFlashLightsAction,proto3,oneof"`
}

type VehicleAction_VehicleControlHonkHornAction struct {
	VehicleControlHonkHornAction *VehicleControlHonkHornAction `protobuf:"bytes,27,opt,name=vehicleControlHonkHornAction,proto3,oneof"`
}

type VehicleAction_VehicleControlResetValetPinAction struct {
	VehicleControlResetValetPinAction *VehicleControlResetValetPinAction `protobuf:"bytes,28,opt,name=vehicleControlResetValetPinAction,proto3,oneof"`
}

type VehicleAction_VehicleControlScheduleSoftwareUpdateAction struct {
	VehicleControlScheduleSoftwareUpdateAction *VehicleControlScheduleSoftwareUpdateAction `protobuf:"bytes,29,opt,name=vehicleControlScheduleSoftwareUpdateAction,proto3,oneof"`
}

type VehicleAction_VehicleControlSetSentryModeAction struct {
	VehicleControlSetSentryModeAction *VehicleControlSetSentryModeAction `protobuf:"bytes,30,opt,name=vehicleControlSetSentryModeAction,proto3,oneof"`
}

type VehicleAction_VehicleControlSetValetModeAction struct {
	VehicleControlSetValetModeAction *VehicleControlSetValetModeAction `protobuf:"bytes,31,opt,name=vehicleControlSetValetModeAction,proto3,oneof"`
}

type VehicleAction_VehicleControlSunroofOpenCloseAction struct {
	VehicleControlSunroofOpenCloseAction *VehicleControlSunroofOpenCloseAction `protobuf:"bytes,32,opt,name=vehicleControlSunroofOpenCloseAction,proto3,oneof"`
}

type VehicleAction_VehicleControlTriggerHomelinkAction struct {
	VehicleControlTriggerHomelinkAction *VehicleControlTriggerHomelinkAction `protobuf:"bytes,33,opt,name=vehicleControlTriggerHomelinkAction,proto3,oneof"`
}

type VehicleAction_VehicleControlWindowAction struct {
	VehicleControlWindowAction *VehicleControlWindowAction `protobuf:"bytes,34,opt,name=vehicleControlWindowAction,proto3,oneof"`
}

type VehicleAction_HvacBioweaponModeAction struct {
	HvacBioweaponModeAction *HvacBioweaponModeAction `protobuf:"bytes,35,opt,name=hvacBioweaponModeAction,proto3,oneof"`
}

type VehicleAction_HvacSeatHeaterActions struct {
	HvacSeatHeaterActions *HvacSeatHeaterActions `protobuf:"bytes,36,opt,name=hvacSeatHeaterActions,proto3,oneof"`
}

type VehicleAction_ScheduledChargingAction struct {
	ScheduledChargingAction *ScheduledChargingAction `protobuf:"bytes,41,opt,name=scheduledChargingAction,proto3,oneof"`
}

type VehicleAction_ScheduledDepartureAction struct {
	ScheduledDepartureAction *ScheduledDepartureAction `protobuf:"bytes,42,opt,name=scheduledDepartureAction,proto3,oneof"`
}

type VehicleAction_SetChargingAmpsAction struct {
	SetChargingAmpsAction *SetChargingAmpsAction `protobuf:"bytes,43,opt,name=setChargingAmpsAction,proto3,oneof"`
}

type VehicleAction_HvacClimateKeeperAction struct {
	HvacClimateKeeperAction *HvacClimateKeeperAction `protobuf:"bytes,44,opt,name=hvacClimateKeeperAction,proto3,oneof"`
}

type VehicleAction_Ping struct {
	Ping *Ping `protobuf:"bytes,46,opt,name=ping,proto3,oneof"`
}

type VehicleAction_AutoSeatClimateAction struct {
	AutoSeatClimateAction *AutoSeatClimateAction `protobuf:"bytes,48,opt,name=autoSeatClimateAction,proto3,oneof"`
}

type VehicleAction_HvacSeatCoolerActions struct {
	HvacSeatCoolerActions *HvacSeatCoolerActions `protobuf:"bytes,49,opt,name=hvacSeatCoolerActions,proto3,oneof"`
}

type VehicleAction_SetCabinOverheatProtectionAction struct {
	SetCabinOverheatProtectionAction *SetCabinOverheatProtectionAction `protobuf:"bytes,50,opt,name=setCabinOverheatProtectionAction,proto3,oneof"`
}

type VehicleAction_SetVehicleNameAction struct {
	SetVehicleNameAction *SetVehicleNameAction `protobuf:"bytes,54,opt,name=setVehicleNameAction,proto3,oneof"`
}

type VehicleAction_ChargePortDoorClose struct {
	ChargePortDoorClose *ChargePortDoorClose `protobuf:"bytes,61,opt,name=chargePortDoorClose,proto3,oneof"`
}

type VehicleAction_ChargePortDoorOpen struct {
	ChargePortDoorOpen *ChargePortDoorOpen `protobuf:"bytes,62,opt,name=chargePortDoorOpen,proto3,oneof"`
}

type VehicleAction_GuestModeAction struct {
	GuestModeAction *VehicleState_GuestMode `protobuf:"bytes,65,opt,name=guestModeAction,proto3,oneof"`
}

type VehicleAction_SetCopTempAction struct {
	SetCopTempAction *SetCopTempAction `protobuf:"bytes,66,opt,name=setCopTempAction,proto3,oneof"`
}

type VehicleAction_EraseUserDataAction struct {
	EraseUserDataAction *EraseUserDataAction `protobuf:"bytes,72,opt,name=eraseUserDataAction,proto3,oneof"`
}

type VehicleAction_VehicleControlSetPinToDriveAction struct {
	VehicleControlSetPinToDriveAction *VehicleControlSetPinToDriveAction `protobuf:"bytes,77,opt,name=vehicleControlSetPinToDriveAction,proto3,oneof"`
}

type VehicleAction_VehicleControlResetPinToDriveAction struct {
	VehicleControlResetPinToDriveAction *VehicleControlResetPinToDriveAction `protobuf:"bytes,78,opt,name=vehicleControlResetPinToDriveAction,proto3,oneof"`
}

type VehicleAction_AddChargeScheduleAction struct {
	AddChargeScheduleAction *ChargeSchedule `protobuf:"bytes,97,opt,name=addChargeScheduleAction,proto3,oneof"`
}

type VehicleAction_RemoveChargeScheduleAction struct {
	RemoveChargeScheduleAction *RemoveChargeScheduleAction `protobuf:"bytes,98,opt,name=removeChargeScheduleAction,proto3,oneof"`
}

type VehicleAction_AddPreconditionScheduleAction struct {
	AddPreconditionScheduleAction *PreconditionSchedule `protobuf:"bytes,99,opt,name=addPreconditionScheduleAction,proto3,oneof"`
}

type VehicleAction_RemovePreconditionScheduleAction struct {
	RemovePreconditionScheduleAction *RemovePreconditionScheduleAction `protobuf:"bytes,100,opt,name=removePreconditionScheduleAction,proto3,oneof"`
}

type VehicleAction_BatchRemovePreconditionSchedulesAction struct {
	BatchRemovePreconditionSchedulesAction *BatchRemovePreconditionSchedulesAction `protobuf:"bytes,107,opt,name=batchRemovePreconditionSchedulesAction,proto3,oneof"`
}

type VehicleAction_BatchRemoveChargeSchedulesAction struct {
	BatchRemoveChargeSchedulesAction *BatchRemoveChargeSchedulesAction `protobuf:"bytes,108,opt,name=batchRemoveChargeSchedulesAction,proto3,oneof"`
}

func (*VehicleAction_ChargingSetLimitAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_ChargingStartStopAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_DrivingClearSpeedLimitPinAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_DrivingSetSpeedLimitAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_DrivingSpeedLimitAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_HvacAutoAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_HvacSetPreconditioningMaxAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_HvacSteeringWheelHeaterAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_HvacTemperatureAdjustmentAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_MediaPlayAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_MediaUpdateVolume) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_MediaNextFavorite) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_MediaPreviousFavorite) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_MediaNextTrack) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_MediaPreviousTrack) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_GetNearbyChargingSites) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_VehicleControlCancelSoftwareUpdateAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_VehicleControlFlashLightsAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_VehicleControlHonkHornAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_VehicleControlResetValetPinAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_VehicleControlScheduleSoftwareUpdateAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_VehicleControlSetSentryModeAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_VehicleControlSetValetModeAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_VehicleControlSunroofOpenCloseAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_VehicleControlTriggerHomelinkAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_VehicleControlWindowAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_HvacBioweaponModeAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_HvacSeatHeaterActions) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_ScheduledChargingAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_ScheduledDepartureAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_SetChargingAmpsAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_HvacClimateKeeperAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_Ping) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_AutoSeatClimateAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_HvacSeatCoolerActions) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_SetCabinOverheatProtectionAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_SetVehicleNameAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_ChargePortDoorClose) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_ChargePortDoorOpen) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_GuestModeAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_SetCopTempAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_EraseUserDataAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_VehicleControlSetPinToDriveAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_VehicleControlResetPinToDriveAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_AddChargeScheduleAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_RemoveChargeScheduleAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_AddPreconditionScheduleAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_RemovePreconditionScheduleAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_BatchRemovePreconditionSchedulesAction) isVehicleAction_VehicleActionMsg() {}

func (*VehicleAction_BatchRemoveChargeSchedulesAction) isVehicleAction_VehicleActionMsg() {}

type EraseUserDataAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *EraseUserDataAction) Reset() {
	*x = EraseUserDataAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EraseUserDataAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EraseUserDataAction) ProtoMessage() {}

func (x *EraseUserDataAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EraseUserDataAction.ProtoReflect.Descriptor instead.
func (*EraseUserDataAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{2}
}

func (x *EraseUserDataAction) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionStatus *ActionStatus `protobuf:"bytes,1,opt,name=actionStatus,proto3" json:"actionStatus,omitempty"`
	// Types that are assignable to ResponseMsg:
	//
	//	*Response_GetSessionInfoResponse
	//	*Response_GetNearbyChargingSites
	//	*Response_Ping
	ResponseMsg isResponse_ResponseMsg `protobuf_oneof:"response_msg"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{3}
}

func (x *Response) GetActionStatus() *ActionStatus {
	if x != nil {
		return x.ActionStatus
	}
	return nil
}

func (m *Response) GetResponseMsg() isResponse_ResponseMsg {
	if m != nil {
		return m.ResponseMsg
	}
	return nil
}

func (x *Response) GetGetSessionInfoResponse() *signatures.SessionInfo {
	if x, ok := x.GetResponseMsg().(*Response_GetSessionInfoResponse); ok {
		return x.GetSessionInfoResponse
	}
	return nil
}

func (x *Response) GetGetNearbyChargingSites() *NearbyChargingSites {
	if x, ok := x.GetResponseMsg().(*Response_GetNearbyChargingSites); ok {
		return x.GetNearbyChargingSites
	}
	return nil
}

func (x *Response) GetPing() *Ping {
	if x, ok := x.GetResponseMsg().(*Response_Ping); ok {
		return x.Ping
	}
	return nil
}

type isResponse_ResponseMsg interface {
	isResponse_ResponseMsg()
}

type Response_GetSessionInfoResponse struct {
	GetSessionInfoResponse *signatures.SessionInfo `protobuf:"bytes,3,opt,name=getSessionInfoResponse,proto3,oneof"`
}

type Response_GetNearbyChargingSites struct {
	GetNearbyChargingSites *NearbyChargingSites `protobuf:"bytes,5,opt,name=getNearbyChargingSites,proto3,oneof"`
}

type Response_Ping struct {
	Ping *Ping `protobuf:"bytes,9,opt,name=ping,proto3,oneof"`
}

func (*Response_GetSessionInfoResponse) isResponse_ResponseMsg() {}

func (*Response_GetNearbyChargingSites) isResponse_ResponseMsg() {}

func (*Response_Ping) isResponse_ResponseMsg() {}

type ActionStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result       OperationStatus_E `protobuf:"varint,1,opt,name=result,proto3,enum=CarServer.OperationStatus_E" json:"result,omitempty"`
	ResultReason *ResultReason     `protobuf:"bytes,2,opt,name=result_reason,json=resultReason,proto3" json:"result_reason,omitempty"`
}

func (x *ActionStatus) Reset() {
	*x = ActionStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionStatus) ProtoMessage() {}

func (x *ActionStatus) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionStatus.ProtoReflect.Descriptor instead.
func (*ActionStatus) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{4}
}

func (x *ActionStatus) GetResult() OperationStatus_E {
	if x != nil {
		return x.Result
	}
	return OperationStatus_E_OPERATIONSTATUS_OK
}

func (x *ActionStatus) GetResultReason() *ResultReason {
	if x != nil {
		return x.ResultReason
	}
	return nil
}

type ResultReason struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Reason:
	//
	//	*ResultReason_PlainText
	Reason isResultReason_Reason `protobuf_oneof:"reason"`
}

func (x *ResultReason) Reset() {
	*x = ResultReason{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultReason) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultReason) ProtoMessage() {}

func (x *ResultReason) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultReason.ProtoReflect.Descriptor instead.
func (*ResultReason) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{5}
}

func (m *ResultReason) GetReason() isResultReason_Reason {
	if m != nil {
		return m.Reason
	}
	return nil
}

func (x *ResultReason) GetPlainText() string {
	if x, ok := x.GetReason().(*ResultReason_PlainText); ok {
		return x.PlainText
	}
	return ""
}

type isResultReason_Reason interface {
	isResultReason_Reason()
}

type ResultReason_PlainText struct {
	PlainText string `protobuf:"bytes,1,opt,name=plain_text,json=plainText,proto3,oneof"`
}

func (*ResultReason_PlainText) isResultReason_Reason() {}

type EncryptedData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldNumber int32  `protobuf:"varint,1,opt,name=field_number,json=fieldNumber,proto3" json:"field_number,omitempty"`
	Ciphertext  []byte `protobuf:"bytes,2,opt,name=ciphertext,proto3" json:"ciphertext,omitempty"`
	Tag         []byte `protobuf:"bytes,3,opt,name=tag,proto3" json:"tag,omitempty"`
}

func (x *EncryptedData) Reset() {
	*x = EncryptedData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedData) ProtoMessage() {}

func (x *EncryptedData) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedData.ProtoReflect.Descriptor instead.
func (*EncryptedData) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{6}
}

func (x *EncryptedData) GetFieldNumber() int32 {
	if x != nil {
		return x.FieldNumber
	}
	return 0
}

func (x *EncryptedData) GetCiphertext() []byte {
	if x != nil {
		return x.Ciphertext
	}
	return nil
}

func (x *EncryptedData) GetTag() []byte {
	if x != nil {
		return x.Tag
	}
	return nil
}

type ChargingSetLimitAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Percent int32 `protobuf:"varint,1,opt,name=percent,proto3" json:"percent,omitempty"`
}

func (x *ChargingSetLimitAction) Reset() {
	*x = ChargingSetLimitAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargingSetLimitAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargingSetLimitAction) ProtoMessage() {}

func (x *ChargingSetLimitAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargingSetLimitAction.ProtoReflect.Descriptor instead.
func (*ChargingSetLimitAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{7}
}

func (x *ChargingSetLimitAction) GetPercent() int32 {
	if x != nil {
		return x.Percent
	}
	return 0
}

type ChargingStartStopAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ChargingAction:
	//
	//	*ChargingStartStopAction_Unknown
	//	*ChargingStartStopAction_Start
	//	*ChargingStartStopAction_StartStandard
	//	*ChargingStartStopAction_StartMaxRange
	//	*ChargingStartStopAction_Stop
	ChargingAction isChargingStartStopAction_ChargingAction `protobuf_oneof:"charging_action"`
}

func (x *ChargingStartStopAction) Reset() {
	*x = ChargingStartStopAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargingStartStopAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargingStartStopAction) ProtoMessage() {}

func (x *ChargingStartStopAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargingStartStopAction.ProtoReflect.Descriptor instead.
func (*ChargingStartStopAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{8}
}

func (m *ChargingStartStopAction) GetChargingAction() isChargingStartStopAction_ChargingAction {
	if m != nil {
		return m.ChargingAction
	}
	return nil
}

func (x *ChargingStartStopAction) GetUnknown() *Void {
	if x, ok := x.GetChargingAction().(*ChargingStartStopAction_Unknown); ok {
		return x.Unknown
	}
	return nil
}

func (x *ChargingStartStopAction) GetStart() *Void {
	if x, ok := x.GetChargingAction().(*ChargingStartStopAction_Start); ok {
		return x.Start
	}
	return nil
}

func (x *ChargingStartStopAction) GetStartStandard() *Void {
	if x, ok := x.GetChargingAction().(*ChargingStartStopAction_StartStandard); ok {
		return x.StartStandard
	}
	return nil
}

func (x *ChargingStartStopAction) GetStartMaxRange() *Void {
	if x, ok := x.GetChargingAction().(*ChargingStartStopAction_StartMaxRange); ok {
		return x.StartMaxRange
	}
	return nil
}

func (x *ChargingStartStopAction) GetStop() *Void {
	if x, ok := x.GetChargingAction().(*ChargingStartStopAction_Stop); ok {
		return x.Stop
	}
	return nil
}

type isChargingStartStopAction_ChargingAction interface {
	isChargingStartStopAction_ChargingAction()
}

type ChargingStartStopAction_Unknown struct {
	Unknown *Void `protobuf:"bytes,1,opt,name=unknown,proto3,oneof"`
}

type ChargingStartStopAction_Start struct {
	Start *Void `protobuf:"bytes,2,opt,name=start,proto3,oneof"`
}

type ChargingStartStopAction_StartStandard struct {
	StartStandard *Void `protobuf:"bytes,3,opt,name=start_standard,json=startStandard,proto3,oneof"`
}

type ChargingStartStopAction_StartMaxRange struct {
	StartMaxRange *Void `protobuf:"bytes,4,opt,name=start_max_range,json=startMaxRange,proto3,oneof"`
}

type ChargingStartStopAction_Stop struct {
	Stop *Void `protobuf:"bytes,5,opt,name=stop,proto3,oneof"`
}

func (*ChargingStartStopAction_Unknown) isChargingStartStopAction_ChargingAction() {}

func (*ChargingStartStopAction_Start) isChargingStartStopAction_ChargingAction() {}

func (*ChargingStartStopAction_StartStandard) isChargingStartStopAction_ChargingAction() {}

func (*ChargingStartStopAction_StartMaxRange) isChargingStartStopAction_ChargingAction() {}

func (*ChargingStartStopAction_Stop) isChargingStartStopAction_ChargingAction() {}

type DrivingClearSpeedLimitPinAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pin string `protobuf:"bytes,1,opt,name=pin,proto3" json:"pin,omitempty"`
}

func (x *DrivingClearSpeedLimitPinAction) Reset() {
	*x = DrivingClearSpeedLimitPinAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrivingClearSpeedLimitPinAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrivingClearSpeedLimitPinAction) ProtoMessage() {}

func (x *DrivingClearSpeedLimitPinAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrivingClearSpeedLimitPinAction.ProtoReflect.Descriptor instead.
func (*DrivingClearSpeedLimitPinAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{9}
}

func (x *DrivingClearSpeedLimitPinAction) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

type DrivingSetSpeedLimitAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LimitMph float64 `protobuf:"fixed64,1,opt,name=limit_mph,json=limitMph,proto3" json:"limit_mph,omitempty"`
}

func (x *DrivingSetSpeedLimitAction) Reset() {
	*x = DrivingSetSpeedLimitAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrivingSetSpeedLimitAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrivingSetSpeedLimitAction) ProtoMessage() {}

func (x *DrivingSetSpeedLimitAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrivingSetSpeedLimitAction.ProtoReflect.Descriptor instead.
func (*DrivingSetSpeedLimitAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{10}
}

func (x *DrivingSetSpeedLimitAction) GetLimitMph() float64 {
	if x != nil {
		return x.LimitMph
	}
	return 0
}

type DrivingSpeedLimitAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activate bool   `protobuf:"varint,1,opt,name=activate,proto3" json:"activate,omitempty"`
	Pin      string `protobuf:"bytes,2,opt,name=pin,proto3" json:"pin,omitempty"`
}

func (x *DrivingSpeedLimitAction) Reset() {
	*x = DrivingSpeedLimitAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DrivingSpeedLimitAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DrivingSpeedLimitAction) ProtoMessage() {}

func (x *DrivingSpeedLimitAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DrivingSpeedLimitAction.ProtoReflect.Descriptor instead.
func (*DrivingSpeedLimitAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{11}
}

func (x *DrivingSpeedLimitAction) GetActivate() bool {
	if x != nil {
		return x.Activate
	}
	return false
}

func (x *DrivingSpeedLimitAction) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

type HvacAutoAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PowerOn        bool `protobuf:"varint,1,opt,name=power_on,json=powerOn,proto3" json:"power_on,omitempty"`
	ManualOverride bool `protobuf:"varint,2,opt,name=manual_override,json=manualOverride,proto3" json:"manual_override,omitempty"`
}

func (x *HvacAutoAction) Reset() {
	*x = HvacAutoAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HvacAutoAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HvacAutoAction) ProtoMessage() {}

func (x *HvacAutoAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HvacAutoAction.ProtoReflect.Descriptor instead.
func (*HvacAutoAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{12}
}

func (x *HvacAutoAction) GetPowerOn() bool {
	if x != nil {
		return x.PowerOn
	}
	return false
}

func (x *HvacAutoAction) GetManualOverride() bool {
	if x != nil {
		return x.ManualOverride
	}
	return false
}

type HvacSeatHeaterActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HvacSeatHeaterAction []*HvacSeatHeaterActions_HvacSeatHeaterAction `protobuf:"bytes,1,rep,name=hvacSeatHeaterAction,proto3" json:"hvacSeatHeaterAction,omitempty"`
}

func (x *HvacSeatHeaterActions) Reset() {
	*x = HvacSeatHeaterActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HvacSeatHeaterActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HvacSeatHeaterActions) ProtoMessage() {}

func (x *HvacSeatHeaterActions) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HvacSeatHeaterActions.ProtoReflect.Descriptor instead.
func (*HvacSeatHeaterActions) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{13}
}

func (x *HvacSeatHeaterActions) GetHvacSeatHeaterAction() []*HvacSeatHeaterActions_HvacSeatHeaterAction {
	if x != nil {
		return x.HvacSeatHeaterAction
	}
	return nil
}

type HvacSeatCoolerActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HvacSeatCoolerAction []*HvacSeatCoolerActions_HvacSeatCoolerAction `protobuf:"bytes,1,rep,name=hvacSeatCoolerAction,proto3" json:"hvacSeatCoolerAction,omitempty"`
}

func (x *HvacSeatCoolerActions) Reset() {
	*x = HvacSeatCoolerActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HvacSeatCoolerActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HvacSeatCoolerActions) ProtoMessage() {}

func (x *HvacSeatCoolerActions) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HvacSeatCoolerActions.ProtoReflect.Descriptor instead.
func (*HvacSeatCoolerActions) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{14}
}

func (x *HvacSeatCoolerActions) GetHvacSeatCoolerAction() []*HvacSeatCoolerActions_HvacSeatCoolerAction {
	if x != nil {
		return x.HvacSeatCoolerAction
	}
	return nil
}

type HvacSetPreconditioningMaxAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	On                 bool                                                   `protobuf:"varint,1,opt,name=on,proto3" json:"on,omitempty"`
	ManualOverride     bool                                                   `protobuf:"varint,2,opt,name=manual_override,json=manualOverride,proto3" json:"manual_override,omitempty"`
	ManualOverrideMode []HvacSetPreconditioningMaxAction_ManualOverrideMode_E `protobuf:"varint,3,rep,packed,name=manual_override_mode,json=manualOverrideMode,proto3,enum=CarServer.HvacSetPreconditioningMaxAction_ManualOverrideMode_E" json:"manual_override_mode,omitempty"`
}

func (x *HvacSetPreconditioningMaxAction) Reset() {
	*x = HvacSetPreconditioningMaxAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HvacSetPreconditioningMaxAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HvacSetPreconditioningMaxAction) ProtoMessage() {}

func (x *HvacSetPreconditioningMaxAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HvacSetPreconditioningMaxAction.ProtoReflect.Descriptor instead.
func (*HvacSetPreconditioningMaxAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{15}
}

func (x *HvacSetPreconditioningMaxAction) GetOn() bool {
	if x != nil {
		return x.On
	}
	return false
}

func (x *HvacSetPreconditioningMaxAction) GetManualOverride() bool {
	if x != nil {
		return x.ManualOverride
	}
	return false
}

func (x *HvacSetPreconditioningMaxAction) GetManualOverrideMode() []HvacSetPreconditioningMaxAction_ManualOverrideMode_E {
	if x != nil {
		return x.ManualOverrideMode
	}
	return nil
}

type HvacSteeringWheelHeaterAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PowerOn bool `protobuf:"varint,1,opt,name=power_on,json=powerOn,proto3" json:"power_on,omitempty"`
}

func (x *HvacSteeringWheelHeaterAction) Reset() {
	*x = HvacSteeringWheelHeaterAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HvacSteeringWheelHeaterAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HvacSteeringWheelHeaterAction) ProtoMessage() {}

func (x *HvacSteeringWheelHeaterAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HvacSteeringWheelHeaterAction.ProtoReflect.Descriptor instead.
func (*HvacSteeringWheelHeaterAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{16}
}

func (x *HvacSteeringWheelHeaterAction) GetPowerOn() bool {
	if x != nil {
		return x.PowerOn
	}
	return false
}

type HvacTemperatureAdjustmentAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeltaCelsius         float32                                                `protobuf:"fixed32,1,opt,name=delta_celsius,json=deltaCelsius,proto3" json:"delta_celsius,omitempty"`
	DeltaPercent         int32                                                  `protobuf:"zigzag32,2,opt,name=delta_percent,json=deltaPercent,proto3" json:"delta_percent,omitempty"`
	AbsoluteCelsius      float32                                                `protobuf:"fixed32,3,opt,name=absolute_celsius,json=absoluteCelsius,proto3" json:"absolute_celsius,omitempty"`
	Level                *HvacTemperatureAdjustmentAction_Temperature           `protobuf:"bytes,5,opt,name=level,proto3" json:"level,omitempty"`
	HvacTemperatureZone  []*HvacTemperatureAdjustmentAction_HvacTemperatureZone `protobuf:"bytes,4,rep,name=hvac_temperature_zone,json=hvacTemperatureZone,proto3" json:"hvac_temperature_zone,omitempty"`
	DriverTempCelsius    float32                                                `protobuf:"fixed32,6,opt,name=driver_temp_celsius,json=driverTempCelsius,proto3" json:"driver_temp_celsius,omitempty"`
	PassengerTempCelsius float32                                                `protobuf:"fixed32,7,opt,name=passenger_temp_celsius,json=passengerTempCelsius,proto3" json:"passenger_temp_celsius,omitempty"`
}

func (x *HvacTemperatureAdjustmentAction) Reset() {
	*x = HvacTemperatureAdjustmentAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HvacTemperatureAdjustmentAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HvacTemperatureAdjustmentAction) ProtoMessage() {}

func (x *HvacTemperatureAdjustmentAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HvacTemperatureAdjustmentAction.ProtoReflect.Descriptor instead.
func (*HvacTemperatureAdjustmentAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{17}
}

func (x *HvacTemperatureAdjustmentAction) GetDeltaCelsius() float32 {
	if x != nil {
		return x.DeltaCelsius
	}
	return 0
}

func (x *HvacTemperatureAdjustmentAction) GetDeltaPercent() int32 {
	if x != nil {
		return x.DeltaPercent
	}
	return 0
}

func (x *HvacTemperatureAdjustmentAction) GetAbsoluteCelsius() float32 {
	if x != nil {
		return x.AbsoluteCelsius
	}
	return 0
}

func (x *HvacTemperatureAdjustmentAction) GetLevel() *HvacTemperatureAdjustmentAction_Temperature {
	if x != nil {
		return x.Level
	}
	return nil
}

func (x *HvacTemperatureAdjustmentAction) GetHvacTemperatureZone() []*HvacTemperatureAdjustmentAction_HvacTemperatureZone {
	if x != nil {
		return x.HvacTemperatureZone
	}
	return nil
}

func (x *HvacTemperatureAdjustmentAction) GetDriverTempCelsius() float32 {
	if x != nil {
		return x.DriverTempCelsius
	}
	return 0
}

func (x *HvacTemperatureAdjustmentAction) GetPassengerTempCelsius() float32 {
	if x != nil {
		return x.PassengerTempCelsius
	}
	return 0
}

type GetNearbyChargingSites struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IncludeMetaData bool  `protobuf:"varint,1,opt,name=include_meta_data,json=includeMetaData,proto3" json:"include_meta_data,omitempty"`
	Radius          int32 `protobuf:"varint,2,opt,name=radius,proto3" json:"radius,omitempty"`
	Count           int32 `protobuf:"varint,3,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *GetNearbyChargingSites) Reset() {
	*x = GetNearbyChargingSites{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNearbyChargingSites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNearbyChargingSites) ProtoMessage() {}

func (x *GetNearbyChargingSites) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNearbyChargingSites.ProtoReflect.Descriptor instead.
func (*GetNearbyChargingSites) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{18}
}

func (x *GetNearbyChargingSites) GetIncludeMetaData() bool {
	if x != nil {
		return x.IncludeMetaData
	}
	return false
}

func (x *GetNearbyChargingSites) GetRadius() int32 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *GetNearbyChargingSites) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type NearbyChargingSites struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Timestamp                 *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Superchargers             []*Superchargers       `protobuf:"bytes,3,rep,name=superchargers,proto3" json:"superchargers,omitempty"`
	CongestionSyncTimeUtcSecs int64                  `protobuf:"varint,4,opt,name=congestion_sync_time_utc_secs,json=congestionSyncTimeUtcSecs,proto3" json:"congestion_sync_time_utc_secs,omitempty"`
}

func (x *NearbyChargingSites) Reset() {
	*x = NearbyChargingSites{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NearbyChargingSites) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NearbyChargingSites) ProtoMessage() {}

func (x *NearbyChargingSites) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NearbyChargingSites.ProtoReflect.Descriptor instead.
func (*NearbyChargingSites) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{19}
}

func (x *NearbyChargingSites) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *NearbyChargingSites) GetSuperchargers() []*Superchargers {
	if x != nil {
		return x.Superchargers
	}
	return nil
}

func (x *NearbyChargingSites) GetCongestionSyncTimeUtcSecs() int64 {
	if x != nil {
		return x.CongestionSyncTimeUtcSecs
	}
	return 0
}

type Superchargers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Amenities              string   `protobuf:"bytes,2,opt,name=amenities,proto3" json:"amenities,omitempty"`
	AvailableStalls        int32    `protobuf:"varint,3,opt,name=available_stalls,json=availableStalls,proto3" json:"available_stalls,omitempty"`
	BillingInfo            string   `protobuf:"bytes,4,opt,name=billing_info,json=billingInfo,proto3" json:"billing_info,omitempty"`
	BillingTime            string   `protobuf:"bytes,5,opt,name=billing_time,json=billingTime,proto3" json:"billing_time,omitempty"`
	City                   string   `protobuf:"bytes,6,opt,name=city,proto3" json:"city,omitempty"`
	Country                string   `protobuf:"bytes,7,opt,name=country,proto3" json:"country,omitempty"`
	DistanceMiles          float32  `protobuf:"fixed32,8,opt,name=distance_miles,json=distanceMiles,proto3" json:"distance_miles,omitempty"`
	District               string   `protobuf:"bytes,9,opt,name=district,proto3" json:"district,omitempty"`
	Location               *LatLong `protobuf:"bytes,10,opt,name=location,proto3" json:"location,omitempty"`
	Name                   string   `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	PostalCode             string   `protobuf:"bytes,12,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	SiteClosed             bool     `protobuf:"varint,13,opt,name=site_closed,json=siteClosed,proto3" json:"site_closed,omitempty"`
	State                  string   `protobuf:"bytes,14,opt,name=state,proto3" json:"state,omitempty"`
	StreetAddress          string   `protobuf:"bytes,15,opt,name=street_address,json=streetAddress,proto3" json:"street_address,omitempty"`
	TotalStalls            int32    `protobuf:"varint,16,opt,name=total_stalls,json=totalStalls,proto3" json:"total_stalls,omitempty"`
	WithinRange            bool     `protobuf:"varint,17,opt,name=within_range,json=withinRange,proto3" json:"within_range,omitempty"`
	MaxPowerKw             int32    `protobuf:"varint,18,opt,name=max_power_kw,json=maxPowerKw,proto3" json:"max_power_kw,omitempty"`
	OutOfOrderStallsNumber int32    `protobuf:"varint,19,opt,name=out_of_order_stalls_number,json=outOfOrderStallsNumber,proto3" json:"out_of_order_stalls_number,omitempty"`
	OutOfOrderStallsNames  string   `protobuf:"bytes,20,opt,name=out_of_order_stalls_names,json=outOfOrderStallsNames,proto3" json:"out_of_order_stalls_names,omitempty"`
}

func (x *Superchargers) Reset() {
	*x = Superchargers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Superchargers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Superchargers) ProtoMessage() {}

func (x *Superchargers) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Superchargers.ProtoReflect.Descriptor instead.
func (*Superchargers) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{20}
}

func (x *Superchargers) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Superchargers) GetAmenities() string {
	if x != nil {
		return x.Amenities
	}
	return ""
}

func (x *Superchargers) GetAvailableStalls() int32 {
	if x != nil {
		return x.AvailableStalls
	}
	return 0
}

func (x *Superchargers) GetBillingInfo() string {
	if x != nil {
		return x.BillingInfo
	}
	return ""
}

func (x *Superchargers) GetBillingTime() string {
	if x != nil {
		return x.BillingTime
	}
	return ""
}

func (x *Superchargers) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Superchargers) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Superchargers) GetDistanceMiles() float32 {
	if x != nil {
		return x.DistanceMiles
	}
	return 0
}

func (x *Superchargers) GetDistrict() string {
	if x != nil {
		return x.District
	}
	return ""
}

func (x *Superchargers) GetLocation() *LatLong {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Superchargers) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Superchargers) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *Superchargers) GetSiteClosed() bool {
	if x != nil {
		return x.SiteClosed
	}
	return false
}

func (x *Superchargers) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Superchargers) GetStreetAddress() string {
	if x != nil {
		return x.StreetAddress
	}
	return ""
}

func (x *Superchargers) GetTotalStalls() int32 {
	if x != nil {
		return x.TotalStalls
	}
	return 0
}

func (x *Superchargers) GetWithinRange() bool {
	if x != nil {
		return x.WithinRange
	}
	return false
}

func (x *Superchargers) GetMaxPowerKw() int32 {
	if x != nil {
		return x.MaxPowerKw
	}
	return 0
}

func (x *Superchargers) GetOutOfOrderStallsNumber() int32 {
	if x != nil {
		return x.OutOfOrderStallsNumber
	}
	return 0
}

func (x *Superchargers) GetOutOfOrderStallsNames() string {
	if x != nil {
		return x.OutOfOrderStallsNames
	}
	return ""
}

type MediaPlayAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MediaPlayAction) Reset() {
	*x = MediaPlayAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaPlayAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaPlayAction) ProtoMessage() {}

func (x *MediaPlayAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaPlayAction.ProtoReflect.Descriptor instead.
func (*MediaPlayAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{21}
}

type MediaUpdateVolume struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MediaVolume:
	//
	//	*MediaUpdateVolume_VolumeDelta
	//	*MediaUpdateVolume_VolumeAbsoluteFloat
	MediaVolume isMediaUpdateVolume_MediaVolume `protobuf_oneof:"media_volume"`
}

func (x *MediaUpdateVolume) Reset() {
	*x = MediaUpdateVolume{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaUpdateVolume) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaUpdateVolume) ProtoMessage() {}

func (x *MediaUpdateVolume) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaUpdateVolume.ProtoReflect.Descriptor instead.
func (*MediaUpdateVolume) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{22}
}

func (m *MediaUpdateVolume) GetMediaVolume() isMediaUpdateVolume_MediaVolume {
	if m != nil {
		return m.MediaVolume
	}
	return nil
}

func (x *MediaUpdateVolume) GetVolumeDelta() int32 {
	if x, ok := x.GetMediaVolume().(*MediaUpdateVolume_VolumeDelta); ok {
		return x.VolumeDelta
	}
	return 0
}

func (x *MediaUpdateVolume) GetVolumeAbsoluteFloat() float32 {
	if x, ok := x.GetMediaVolume().(*MediaUpdateVolume_VolumeAbsoluteFloat); ok {
		return x.VolumeAbsoluteFloat
	}
	return 0
}

type isMediaUpdateVolume_MediaVolume interface {
	isMediaUpdateVolume_MediaVolume()
}

type MediaUpdateVolume_VolumeDelta struct {
	VolumeDelta int32 `protobuf:"zigzag32,1,opt,name=volume_delta,json=volumeDelta,proto3,oneof"`
}

type MediaUpdateVolume_VolumeAbsoluteFloat struct {
	VolumeAbsoluteFloat float32 `protobuf:"fixed32,3,opt,name=volume_absolute_float,json=volumeAbsoluteFloat,proto3,oneof"`
}

func (*MediaUpdateVolume_VolumeDelta) isMediaUpdateVolume_MediaVolume() {}

func (*MediaUpdateVolume_VolumeAbsoluteFloat) isMediaUpdateVolume_MediaVolume() {}

type MediaNextFavorite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MediaNextFavorite) Reset() {
	*x = MediaNextFavorite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaNextFavorite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaNextFavorite) ProtoMessage() {}

func (x *MediaNextFavorite) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaNextFavorite.ProtoReflect.Descriptor instead.
func (*MediaNextFavorite) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{23}
}

type MediaPreviousFavorite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MediaPreviousFavorite) Reset() {
	*x = MediaPreviousFavorite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaPreviousFavorite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaPreviousFavorite) ProtoMessage() {}

func (x *MediaPreviousFavorite) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaPreviousFavorite.ProtoReflect.Descriptor instead.
func (*MediaPreviousFavorite) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{24}
}

type MediaNextTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MediaNextTrack) Reset() {
	*x = MediaNextTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaNextTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaNextTrack) ProtoMessage() {}

func (x *MediaNextTrack) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaNextTrack.ProtoReflect.Descriptor instead.
func (*MediaNextTrack) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{25}
}

type MediaPreviousTrack struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MediaPreviousTrack) Reset() {
	*x = MediaPreviousTrack{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MediaPreviousTrack) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MediaPreviousTrack) ProtoMessage() {}

func (x *MediaPreviousTrack) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MediaPreviousTrack.ProtoReflect.Descriptor instead.
func (*MediaPreviousTrack) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{26}
}

type VehicleControlCancelSoftwareUpdateAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VehicleControlCancelSoftwareUpdateAction) Reset() {
	*x = VehicleControlCancelSoftwareUpdateAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleControlCancelSoftwareUpdateAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleControlCancelSoftwareUpdateAction) ProtoMessage() {}

func (x *VehicleControlCancelSoftwareUpdateAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleControlCancelSoftwareUpdateAction.ProtoReflect.Descriptor instead.
func (*VehicleControlCancelSoftwareUpdateAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{27}
}

type VehicleControlFlashLightsAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VehicleControlFlashLightsAction) Reset() {
	*x = VehicleControlFlashLightsAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleControlFlashLightsAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleControlFlashLightsAction) ProtoMessage() {}

func (x *VehicleControlFlashLightsAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleControlFlashLightsAction.ProtoReflect.Descriptor instead.
func (*VehicleControlFlashLightsAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{28}
}

type VehicleControlHonkHornAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VehicleControlHonkHornAction) Reset() {
	*x = VehicleControlHonkHornAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleControlHonkHornAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleControlHonkHornAction) ProtoMessage() {}

func (x *VehicleControlHonkHornAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleControlHonkHornAction.ProtoReflect.Descriptor instead.
func (*VehicleControlHonkHornAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{29}
}

type VehicleControlResetValetPinAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VehicleControlResetValetPinAction) Reset() {
	*x = VehicleControlResetValetPinAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleControlResetValetPinAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleControlResetValetPinAction) ProtoMessage() {}

func (x *VehicleControlResetValetPinAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleControlResetValetPinAction.ProtoReflect.Descriptor instead.
func (*VehicleControlResetValetPinAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{30}
}

type VehicleControlScheduleSoftwareUpdateAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OffsetSec int32 `protobuf:"varint,1,opt,name=offset_sec,json=offsetSec,proto3" json:"offset_sec,omitempty"`
}

func (x *VehicleControlScheduleSoftwareUpdateAction) Reset() {
	*x = VehicleControlScheduleSoftwareUpdateAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleControlScheduleSoftwareUpdateAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleControlScheduleSoftwareUpdateAction) ProtoMessage() {}

func (x *VehicleControlScheduleSoftwareUpdateAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleControlScheduleSoftwareUpdateAction.ProtoReflect.Descriptor instead.
func (*VehicleControlScheduleSoftwareUpdateAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{31}
}

func (x *VehicleControlScheduleSoftwareUpdateAction) GetOffsetSec() int32 {
	if x != nil {
		return x.OffsetSec
	}
	return 0
}

type VehicleControlSetSentryModeAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	On bool `protobuf:"varint,1,opt,name=on,proto3" json:"on,omitempty"`
}

func (x *VehicleControlSetSentryModeAction) Reset() {
	*x = VehicleControlSetSentryModeAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleControlSetSentryModeAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleControlSetSentryModeAction) ProtoMessage() {}

func (x *VehicleControlSetSentryModeAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleControlSetSentryModeAction.ProtoReflect.Descriptor instead.
func (*VehicleControlSetSentryModeAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{32}
}

func (x *VehicleControlSetSentryModeAction) GetOn() bool {
	if x != nil {
		return x.On
	}
	return false
}

type VehicleControlSetValetModeAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	On       bool   `protobuf:"varint,1,opt,name=on,proto3" json:"on,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *VehicleControlSetValetModeAction) Reset() {
	*x = VehicleControlSetValetModeAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleControlSetValetModeAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleControlSetValetModeAction) ProtoMessage() {}

func (x *VehicleControlSetValetModeAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleControlSetValetModeAction.ProtoReflect.Descriptor instead.
func (*VehicleControlSetValetModeAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{33}
}

func (x *VehicleControlSetValetModeAction) GetOn() bool {
	if x != nil {
		return x.On
	}
	return false
}

func (x *VehicleControlSetValetModeAction) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type VehicleControlSunroofOpenCloseAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SunroofLevel:
	//
	//	*VehicleControlSunroofOpenCloseAction_AbsoluteLevel
	//	*VehicleControlSunroofOpenCloseAction_DeltaLevel
	SunroofLevel isVehicleControlSunroofOpenCloseAction_SunroofLevel `protobuf_oneof:"sunroof_level"`
	// Types that are assignable to Action:
	//
	//	*VehicleControlSunroofOpenCloseAction_Vent
	//	*VehicleControlSunroofOpenCloseAction_Close
	//	*VehicleControlSunroofOpenCloseAction_Open
	Action isVehicleControlSunroofOpenCloseAction_Action `protobuf_oneof:"action"`
}

func (x *VehicleControlSunroofOpenCloseAction) Reset() {
	*x = VehicleControlSunroofOpenCloseAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleControlSunroofOpenCloseAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleControlSunroofOpenCloseAction) ProtoMessage() {}

func (x *VehicleControlSunroofOpenCloseAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleControlSunroofOpenCloseAction.ProtoReflect.Descriptor instead.
func (*VehicleControlSunroofOpenCloseAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{34}
}

func (m *VehicleControlSunroofOpenCloseAction) GetSunroofLevel() isVehicleControlSunroofOpenCloseAction_SunroofLevel {
	if m != nil {
		return m.SunroofLevel
	}
	return nil
}

func (x *VehicleControlSunroofOpenCloseAction) GetAbsoluteLevel() int32 {
	if x, ok := x.GetSunroofLevel().(*VehicleControlSunroofOpenCloseAction_AbsoluteLevel); ok {
		return x.AbsoluteLevel
	}
	return 0
}

func (x *VehicleControlSunroofOpenCloseAction) GetDeltaLevel() int32 {
	if x, ok := x.GetSunroofLevel().(*VehicleControlSunroofOpenCloseAction_DeltaLevel); ok {
		return x.DeltaLevel
	}
	return 0
}

func (m *VehicleControlSunroofOpenCloseAction) GetAction() isVehicleControlSunroofOpenCloseAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *VehicleControlSunroofOpenCloseAction) GetVent() *Void {
	if x, ok := x.GetAction().(*VehicleControlSunroofOpenCloseAction_Vent); ok {
		return x.Vent
	}
	return nil
}

func (x *VehicleControlSunroofOpenCloseAction) GetClose() *Void {
	if x, ok := x.GetAction().(*VehicleControlSunroofOpenCloseAction_Close); ok {
		return x.Close
	}
	return nil
}

func (x *VehicleControlSunroofOpenCloseAction) GetOpen() *Void {
	if x, ok := x.GetAction().(*VehicleControlSunroofOpenCloseAction_Open); ok {
		return x.Open
	}
	return nil
}

type isVehicleControlSunroofOpenCloseAction_SunroofLevel interface {
	isVehicleControlSunroofOpenCloseAction_SunroofLevel()
}

type VehicleControlSunroofOpenCloseAction_AbsoluteLevel struct {
	AbsoluteLevel int32 `protobuf:"varint,1,opt,name=absolute_level,json=absoluteLevel,proto3,oneof"`
}

type VehicleControlSunroofOpenCloseAction_DeltaLevel struct {
	DeltaLevel int32 `protobuf:"zigzag32,2,opt,name=delta_level,json=deltaLevel,proto3,oneof"`
}

func (*VehicleControlSunroofOpenCloseAction_AbsoluteLevel) isVehicleControlSunroofOpenCloseAction_SunroofLevel() {
}

func (*VehicleControlSunroofOpenCloseAction_DeltaLevel) isVehicleControlSunroofOpenCloseAction_SunroofLevel() {
}

type isVehicleControlSunroofOpenCloseAction_Action interface {
	isVehicleControlSunroofOpenCloseAction_Action()
}

type VehicleControlSunroofOpenCloseAction_Vent struct {
	Vent *Void `protobuf:"bytes,3,opt,name=vent,proto3,oneof"`
}

type VehicleControlSunroofOpenCloseAction_Close struct {
	Close *Void `protobuf:"bytes,4,opt,name=close,proto3,oneof"`
}

type VehicleControlSunroofOpenCloseAction_Open struct {
	Open *Void `protobuf:"bytes,5,opt,name=open,proto3,oneof"`
}

func (*VehicleControlSunroofOpenCloseAction_Vent) isVehicleControlSunroofOpenCloseAction_Action() {}

func (*VehicleControlSunroofOpenCloseAction_Close) isVehicleControlSunroofOpenCloseAction_Action() {}

func (*VehicleControlSunroofOpenCloseAction_Open) isVehicleControlSunroofOpenCloseAction_Action() {}

type VehicleControlTriggerHomelinkAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Location *LatLong `protobuf:"bytes,1,opt,name=location,proto3" json:"location,omitempty"`
	Token    string   `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
}

func (x *VehicleControlTriggerHomelinkAction) Reset() {
	*x = VehicleControlTriggerHomelinkAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleControlTriggerHomelinkAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleControlTriggerHomelinkAction) ProtoMessage() {}

func (x *VehicleControlTriggerHomelinkAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleControlTriggerHomelinkAction.ProtoReflect.Descriptor instead.
func (*VehicleControlTriggerHomelinkAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{35}
}

func (x *VehicleControlTriggerHomelinkAction) GetLocation() *LatLong {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *VehicleControlTriggerHomelinkAction) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type VehicleControlWindowAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//
	//	*VehicleControlWindowAction_Unknown
	//	*VehicleControlWindowAction_Vent
	//	*VehicleControlWindowAction_Close
	Action isVehicleControlWindowAction_Action `protobuf_oneof:"action"`
}

func (x *VehicleControlWindowAction) Reset() {
	*x = VehicleControlWindowAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleControlWindowAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleControlWindowAction) ProtoMessage() {}

func (x *VehicleControlWindowAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleControlWindowAction.ProtoReflect.Descriptor instead.
func (*VehicleControlWindowAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{36}
}

func (m *VehicleControlWindowAction) GetAction() isVehicleControlWindowAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *VehicleControlWindowAction) GetUnknown() *Void {
	if x, ok := x.GetAction().(*VehicleControlWindowAction_Unknown); ok {
		return x.Unknown
	}
	return nil
}

func (x *VehicleControlWindowAction) GetVent() *Void {
	if x, ok := x.GetAction().(*VehicleControlWindowAction_Vent); ok {
		return x.Vent
	}
	return nil
}

func (x *VehicleControlWindowAction) GetClose() *Void {
	if x, ok := x.GetAction().(*VehicleControlWindowAction_Close); ok {
		return x.Close
	}
	return nil
}

type isVehicleControlWindowAction_Action interface {
	isVehicleControlWindowAction_Action()
}

type VehicleControlWindowAction_Unknown struct {
	Unknown *Void `protobuf:"bytes,2,opt,name=unknown,proto3,oneof"`
}

type VehicleControlWindowAction_Vent struct {
	Vent *Void `protobuf:"bytes,3,opt,name=vent,proto3,oneof"`
}

type VehicleControlWindowAction_Close struct {
	Close *Void `protobuf:"bytes,4,opt,name=close,proto3,oneof"`
}

func (*VehicleControlWindowAction_Unknown) isVehicleControlWindowAction_Action() {}

func (*VehicleControlWindowAction_Vent) isVehicleControlWindowAction_Action() {}

func (*VehicleControlWindowAction_Close) isVehicleControlWindowAction_Action() {}

type HvacBioweaponModeAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	On             bool `protobuf:"varint,1,opt,name=on,proto3" json:"on,omitempty"`
	ManualOverride bool `protobuf:"varint,2,opt,name=manual_override,json=manualOverride,proto3" json:"manual_override,omitempty"`
}

func (x *HvacBioweaponModeAction) Reset() {
	*x = HvacBioweaponModeAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HvacBioweaponModeAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HvacBioweaponModeAction) ProtoMessage() {}

func (x *HvacBioweaponModeAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HvacBioweaponModeAction.ProtoReflect.Descriptor instead.
func (*HvacBioweaponModeAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{37}
}

func (x *HvacBioweaponModeAction) GetOn() bool {
	if x != nil {
		return x.On
	}
	return false
}

func (x *HvacBioweaponModeAction) GetManualOverride() bool {
	if x != nil {
		return x.ManualOverride
	}
	return false
}

type AutoSeatClimateAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Carseat []*AutoSeatClimateAction_CarSeat `protobuf:"bytes,1,rep,name=carseat,proto3" json:"carseat,omitempty"`
}

func (x *AutoSeatClimateAction) Reset() {
	*x = AutoSeatClimateAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoSeatClimateAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoSeatClimateAction) ProtoMessage() {}

func (x *AutoSeatClimateAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoSeatClimateAction.ProtoReflect.Descriptor instead.
func (*AutoSeatClimateAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{38}
}

func (x *AutoSeatClimateAction) GetCarseat() []*AutoSeatClimateAction_CarSeat {
	if x != nil {
		return x.Carseat
	}
	return nil
}

type Ping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PingId              int32                  `protobuf:"varint,1,opt,name=ping_id,json=pingId,proto3" json:"ping_id,omitempty"`
	LocalTimestamp      *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=local_timestamp,json=localTimestamp,proto3" json:"local_timestamp,omitempty"`
	LastRemoteTimestamp *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_remote_timestamp,json=lastRemoteTimestamp,proto3" json:"last_remote_timestamp,omitempty"`
}

func (x *Ping) Reset() {
	*x = Ping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Ping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Ping) ProtoMessage() {}

func (x *Ping) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Ping.ProtoReflect.Descriptor instead.
func (*Ping) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{39}
}

func (x *Ping) GetPingId() int32 {
	if x != nil {
		return x.PingId
	}
	return 0
}

func (x *Ping) GetLocalTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LocalTimestamp
	}
	return nil
}

func (x *Ping) GetLastRemoteTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.LastRemoteTimestamp
	}
	return nil
}

type ScheduledChargingAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled      bool  `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	ChargingTime int32 `protobuf:"varint,2,opt,name=charging_time,json=chargingTime,proto3" json:"charging_time,omitempty"`
}

func (x *ScheduledChargingAction) Reset() {
	*x = ScheduledChargingAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledChargingAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledChargingAction) ProtoMessage() {}

func (x *ScheduledChargingAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledChargingAction.ProtoReflect.Descriptor instead.
func (*ScheduledChargingAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{40}
}

func (x *ScheduledChargingAction) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ScheduledChargingAction) GetChargingTime() int32 {
	if x != nil {
		return x.ChargingTime
	}
	return 0
}

type ScheduledDepartureAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled              bool                  `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	DepartureTime        int32                 `protobuf:"varint,2,opt,name=departure_time,json=departureTime,proto3" json:"departure_time,omitempty"`
	PreconditioningTimes *PreconditioningTimes `protobuf:"bytes,3,opt,name=preconditioning_times,json=preconditioningTimes,proto3" json:"preconditioning_times,omitempty"`
	OffPeakChargingTimes *OffPeakChargingTimes `protobuf:"bytes,4,opt,name=off_peak_charging_times,json=offPeakChargingTimes,proto3" json:"off_peak_charging_times,omitempty"`
	OffPeakHoursEndTime  int32                 `protobuf:"varint,5,opt,name=off_peak_hours_end_time,json=offPeakHoursEndTime,proto3" json:"off_peak_hours_end_time,omitempty"`
}

func (x *ScheduledDepartureAction) Reset() {
	*x = ScheduledDepartureAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScheduledDepartureAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScheduledDepartureAction) ProtoMessage() {}

func (x *ScheduledDepartureAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScheduledDepartureAction.ProtoReflect.Descriptor instead.
func (*ScheduledDepartureAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{41}
}

func (x *ScheduledDepartureAction) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ScheduledDepartureAction) GetDepartureTime() int32 {
	if x != nil {
		return x.DepartureTime
	}
	return 0
}

func (x *ScheduledDepartureAction) GetPreconditioningTimes() *PreconditioningTimes {
	if x != nil {
		return x.PreconditioningTimes
	}
	return nil
}

func (x *ScheduledDepartureAction) GetOffPeakChargingTimes() *OffPeakChargingTimes {
	if x != nil {
		return x.OffPeakChargingTimes
	}
	return nil
}

func (x *ScheduledDepartureAction) GetOffPeakHoursEndTime() int32 {
	if x != nil {
		return x.OffPeakHoursEndTime
	}
	return 0
}

type HvacClimateKeeperAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClimateKeeperAction HvacClimateKeeperAction_ClimateKeeperAction_E `protobuf:"varint,1,opt,name=ClimateKeeperAction,proto3,enum=CarServer.HvacClimateKeeperAction_ClimateKeeperAction_E" json:"ClimateKeeperAction,omitempty"`
	ManualOverride      bool                                          `protobuf:"varint,2,opt,name=manual_override,json=manualOverride,proto3" json:"manual_override,omitempty"`
}

func (x *HvacClimateKeeperAction) Reset() {
	*x = HvacClimateKeeperAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HvacClimateKeeperAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HvacClimateKeeperAction) ProtoMessage() {}

func (x *HvacClimateKeeperAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HvacClimateKeeperAction.ProtoReflect.Descriptor instead.
func (*HvacClimateKeeperAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{42}
}

func (x *HvacClimateKeeperAction) GetClimateKeeperAction() HvacClimateKeeperAction_ClimateKeeperAction_E {
	if x != nil {
		return x.ClimateKeeperAction
	}
	return HvacClimateKeeperAction_ClimateKeeperAction_Off
}

func (x *HvacClimateKeeperAction) GetManualOverride() bool {
	if x != nil {
		return x.ManualOverride
	}
	return false
}

type SetChargingAmpsAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargingAmps int32 `protobuf:"varint,1,opt,name=charging_amps,json=chargingAmps,proto3" json:"charging_amps,omitempty"`
}

func (x *SetChargingAmpsAction) Reset() {
	*x = SetChargingAmpsAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChargingAmpsAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChargingAmpsAction) ProtoMessage() {}

func (x *SetChargingAmpsAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChargingAmpsAction.ProtoReflect.Descriptor instead.
func (*SetChargingAmpsAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{43}
}

func (x *SetChargingAmpsAction) GetChargingAmps() int32 {
	if x != nil {
		return x.ChargingAmps
	}
	return 0
}

type RemoveChargeScheduleAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // datetime in epoch time
}

func (x *RemoveChargeScheduleAction) Reset() {
	*x = RemoveChargeScheduleAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveChargeScheduleAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveChargeScheduleAction) ProtoMessage() {}

func (x *RemoveChargeScheduleAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveChargeScheduleAction.ProtoReflect.Descriptor instead.
func (*RemoveChargeScheduleAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{44}
}

func (x *RemoveChargeScheduleAction) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type BatchRemoveChargeSchedulesAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Home  bool `protobuf:"varint,1,opt,name=home,proto3" json:"home,omitempty"`
	Work  bool `protobuf:"varint,2,opt,name=work,proto3" json:"work,omitempty"`
	Other bool `protobuf:"varint,3,opt,name=other,proto3" json:"other,omitempty"` // Delete non-home and non-work charge schedules
}

func (x *BatchRemoveChargeSchedulesAction) Reset() {
	*x = BatchRemoveChargeSchedulesAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchRemoveChargeSchedulesAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRemoveChargeSchedulesAction) ProtoMessage() {}

func (x *BatchRemoveChargeSchedulesAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRemoveChargeSchedulesAction.ProtoReflect.Descriptor instead.
func (*BatchRemoveChargeSchedulesAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{45}
}

func (x *BatchRemoveChargeSchedulesAction) GetHome() bool {
	if x != nil {
		return x.Home
	}
	return false
}

func (x *BatchRemoveChargeSchedulesAction) GetWork() bool {
	if x != nil {
		return x.Work
	}
	return false
}

func (x *BatchRemoveChargeSchedulesAction) GetOther() bool {
	if x != nil {
		return x.Other
	}
	return false
}

type BatchRemovePreconditionSchedulesAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Home  bool `protobuf:"varint,1,opt,name=home,proto3" json:"home,omitempty"`
	Work  bool `protobuf:"varint,2,opt,name=work,proto3" json:"work,omitempty"`
	Other bool `protobuf:"varint,3,opt,name=other,proto3" json:"other,omitempty"` // Delete non-home and non-work precondition schedules
}

func (x *BatchRemovePreconditionSchedulesAction) Reset() {
	*x = BatchRemovePreconditionSchedulesAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchRemovePreconditionSchedulesAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchRemovePreconditionSchedulesAction) ProtoMessage() {}

func (x *BatchRemovePreconditionSchedulesAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchRemovePreconditionSchedulesAction.ProtoReflect.Descriptor instead.
func (*BatchRemovePreconditionSchedulesAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{46}
}

func (x *BatchRemovePreconditionSchedulesAction) GetHome() bool {
	if x != nil {
		return x.Home
	}
	return false
}

func (x *BatchRemovePreconditionSchedulesAction) GetWork() bool {
	if x != nil {
		return x.Work
	}
	return false
}

func (x *BatchRemovePreconditionSchedulesAction) GetOther() bool {
	if x != nil {
		return x.Other
	}
	return false
}

type RemovePreconditionScheduleAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // datetime in epoch time
}

func (x *RemovePreconditionScheduleAction) Reset() {
	*x = RemovePreconditionScheduleAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovePreconditionScheduleAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovePreconditionScheduleAction) ProtoMessage() {}

func (x *RemovePreconditionScheduleAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovePreconditionScheduleAction.ProtoReflect.Descriptor instead.
func (*RemovePreconditionScheduleAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{47}
}

func (x *RemovePreconditionScheduleAction) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SetCabinOverheatProtectionAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	On      bool `protobuf:"varint,1,opt,name=on,proto3" json:"on,omitempty"`
	FanOnly bool `protobuf:"varint,2,opt,name=fan_only,json=fanOnly,proto3" json:"fan_only,omitempty"`
}

func (x *SetCabinOverheatProtectionAction) Reset() {
	*x = SetCabinOverheatProtectionAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCabinOverheatProtectionAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCabinOverheatProtectionAction) ProtoMessage() {}

func (x *SetCabinOverheatProtectionAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCabinOverheatProtectionAction.ProtoReflect.Descriptor instead.
func (*SetCabinOverheatProtectionAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{48}
}

func (x *SetCabinOverheatProtectionAction) GetOn() bool {
	if x != nil {
		return x.On
	}
	return false
}

func (x *SetCabinOverheatProtectionAction) GetFanOnly() bool {
	if x != nil {
		return x.FanOnly
	}
	return false
}

type SetVehicleNameAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VehicleName string `protobuf:"bytes,1,opt,name=vehicleName,proto3" json:"vehicleName,omitempty"`
}

func (x *SetVehicleNameAction) Reset() {
	*x = SetVehicleNameAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetVehicleNameAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetVehicleNameAction) ProtoMessage() {}

func (x *SetVehicleNameAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetVehicleNameAction.ProtoReflect.Descriptor instead.
func (*SetVehicleNameAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{49}
}

func (x *SetVehicleNameAction) GetVehicleName() string {
	if x != nil {
		return x.VehicleName
	}
	return ""
}

type ChargePortDoorClose struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChargePortDoorClose) Reset() {
	*x = ChargePortDoorClose{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargePortDoorClose) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargePortDoorClose) ProtoMessage() {}

func (x *ChargePortDoorClose) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargePortDoorClose.ProtoReflect.Descriptor instead.
func (*ChargePortDoorClose) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{50}
}

type ChargePortDoorOpen struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChargePortDoorOpen) Reset() {
	*x = ChargePortDoorOpen{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargePortDoorOpen) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargePortDoorOpen) ProtoMessage() {}

func (x *ChargePortDoorOpen) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargePortDoorOpen.ProtoReflect.Descriptor instead.
func (*ChargePortDoorOpen) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{51}
}

type SetCopTempAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CopActivationTemp ClimateState_CopActivationTemp `protobuf:"varint,1,opt,name=copActivationTemp,proto3,enum=CarServer.ClimateState_CopActivationTemp" json:"copActivationTemp,omitempty"`
}

func (x *SetCopTempAction) Reset() {
	*x = SetCopTempAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetCopTempAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCopTempAction) ProtoMessage() {}

func (x *SetCopTempAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCopTempAction.ProtoReflect.Descriptor instead.
func (*SetCopTempAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{52}
}

func (x *SetCopTempAction) GetCopActivationTemp() ClimateState_CopActivationTemp {
	if x != nil {
		return x.CopActivationTemp
	}
	return ClimateState_CopActivationTempUnspecified
}

type VehicleControlSetPinToDriveAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	On       bool   `protobuf:"varint,1,opt,name=on,proto3" json:"on,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *VehicleControlSetPinToDriveAction) Reset() {
	*x = VehicleControlSetPinToDriveAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleControlSetPinToDriveAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleControlSetPinToDriveAction) ProtoMessage() {}

func (x *VehicleControlSetPinToDriveAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleControlSetPinToDriveAction.ProtoReflect.Descriptor instead.
func (*VehicleControlSetPinToDriveAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{53}
}

func (x *VehicleControlSetPinToDriveAction) GetOn() bool {
	if x != nil {
		return x.On
	}
	return false
}

func (x *VehicleControlSetPinToDriveAction) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type VehicleControlResetPinToDriveAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VehicleControlResetPinToDriveAction) Reset() {
	*x = VehicleControlResetPinToDriveAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleControlResetPinToDriveAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleControlResetPinToDriveAction) ProtoMessage() {}

func (x *VehicleControlResetPinToDriveAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleControlResetPinToDriveAction.ProtoReflect.Descriptor instead.
func (*VehicleControlResetPinToDriveAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{54}
}

type HvacSeatHeaterActions_HvacSeatHeaterAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SeatHeaterLevel:
	//
	//	*HvacSeatHeaterActions_HvacSeatHeaterAction_SEAT_HEATER_UNKNOWN
	//	*HvacSeatHeaterActions_HvacSeatHeaterAction_SEAT_HEATER_OFF
	//	*HvacSeatHeaterActions_HvacSeatHeaterAction_SEAT_HEATER_LOW
	//	*HvacSeatHeaterActions_HvacSeatHeaterAction_SEAT_HEATER_MED
	//	*HvacSeatHeaterActions_HvacSeatHeaterAction_SEAT_HEATER_HIGH
	SeatHeaterLevel isHvacSeatHeaterActions_HvacSeatHeaterAction_SeatHeaterLevel `protobuf_oneof:"seat_heater_level"`
	// Types that are assignable to SeatPosition:
	//
	//	*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_UNKNOWN
	//	*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_FRONT_LEFT
	//	*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_FRONT_RIGHT
	//	*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_REAR_LEFT
	//	*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_REAR_LEFT_BACK
	//	*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_REAR_CENTER
	//	*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_REAR_RIGHT
	//	*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_REAR_RIGHT_BACK
	//	*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_THIRD_ROW_LEFT
	//	*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_THIRD_ROW_RIGHT
	SeatPosition isHvacSeatHeaterActions_HvacSeatHeaterAction_SeatPosition `protobuf_oneof:"seat_position"`
}

func (x *HvacSeatHeaterActions_HvacSeatHeaterAction) Reset() {
	*x = HvacSeatHeaterActions_HvacSeatHeaterAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HvacSeatHeaterActions_HvacSeatHeaterAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HvacSeatHeaterActions_HvacSeatHeaterAction) ProtoMessage() {}

func (x *HvacSeatHeaterActions_HvacSeatHeaterAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HvacSeatHeaterActions_HvacSeatHeaterAction.ProtoReflect.Descriptor instead.
func (*HvacSeatHeaterActions_HvacSeatHeaterAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{13, 0}
}

func (m *HvacSeatHeaterActions_HvacSeatHeaterAction) GetSeatHeaterLevel() isHvacSeatHeaterActions_HvacSeatHeaterAction_SeatHeaterLevel {
	if m != nil {
		return m.SeatHeaterLevel
	}
	return nil
}

func (x *HvacSeatHeaterActions_HvacSeatHeaterAction) GetSEAT_HEATER_UNKNOWN() *Void {
	if x, ok := x.GetSeatHeaterLevel().(*HvacSeatHeaterActions_HvacSeatHeaterAction_SEAT_HEATER_UNKNOWN); ok {
		return x.SEAT_HEATER_UNKNOWN
	}
	return nil
}

func (x *HvacSeatHeaterActions_HvacSeatHeaterAction) GetSEAT_HEATER_OFF() *Void {
	if x, ok := x.GetSeatHeaterLevel().(*HvacSeatHeaterActions_HvacSeatHeaterAction_SEAT_HEATER_OFF); ok {
		return x.SEAT_HEATER_OFF
	}
	return nil
}

func (x *HvacSeatHeaterActions_HvacSeatHeaterAction) GetSEAT_HEATER_LOW() *Void {
	if x, ok := x.GetSeatHeaterLevel().(*HvacSeatHeaterActions_HvacSeatHeaterAction_SEAT_HEATER_LOW); ok {
		return x.SEAT_HEATER_LOW
	}
	return nil
}

func (x *HvacSeatHeaterActions_HvacSeatHeaterAction) GetSEAT_HEATER_MED() *Void {
	if x, ok := x.GetSeatHeaterLevel().(*HvacSeatHeaterActions_HvacSeatHeaterAction_SEAT_HEATER_MED); ok {
		return x.SEAT_HEATER_MED
	}
	return nil
}

func (x *HvacSeatHeaterActions_HvacSeatHeaterAction) GetSEAT_HEATER_HIGH() *Void {
	if x, ok := x.GetSeatHeaterLevel().(*HvacSeatHeaterActions_HvacSeatHeaterAction_SEAT_HEATER_HIGH); ok {
		return x.SEAT_HEATER_HIGH
	}
	return nil
}

func (m *HvacSeatHeaterActions_HvacSeatHeaterAction) GetSeatPosition() isHvacSeatHeaterActions_HvacSeatHeaterAction_SeatPosition {
	if m != nil {
		return m.SeatPosition
	}
	return nil
}

func (x *HvacSeatHeaterActions_HvacSeatHeaterAction) GetCAR_SEAT_UNKNOWN() *Void {
	if x, ok := x.GetSeatPosition().(*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_UNKNOWN); ok {
		return x.CAR_SEAT_UNKNOWN
	}
	return nil
}

func (x *HvacSeatHeaterActions_HvacSeatHeaterAction) GetCAR_SEAT_FRONT_LEFT() *Void {
	if x, ok := x.GetSeatPosition().(*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_FRONT_LEFT); ok {
		return x.CAR_SEAT_FRONT_LEFT
	}
	return nil
}

func (x *HvacSeatHeaterActions_HvacSeatHeaterAction) GetCAR_SEAT_FRONT_RIGHT() *Void {
	if x, ok := x.GetSeatPosition().(*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_FRONT_RIGHT); ok {
		return x.CAR_SEAT_FRONT_RIGHT
	}
	return nil
}

func (x *HvacSeatHeaterActions_HvacSeatHeaterAction) GetCAR_SEAT_REAR_LEFT() *Void {
	if x, ok := x.GetSeatPosition().(*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_REAR_LEFT); ok {
		return x.CAR_SEAT_REAR_LEFT
	}
	return nil
}

func (x *HvacSeatHeaterActions_HvacSeatHeaterAction) GetCAR_SEAT_REAR_LEFT_BACK() *Void {
	if x, ok := x.GetSeatPosition().(*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_REAR_LEFT_BACK); ok {
		return x.CAR_SEAT_REAR_LEFT_BACK
	}
	return nil
}

func (x *HvacSeatHeaterActions_HvacSeatHeaterAction) GetCAR_SEAT_REAR_CENTER() *Void {
	if x, ok := x.GetSeatPosition().(*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_REAR_CENTER); ok {
		return x.CAR_SEAT_REAR_CENTER
	}
	return nil
}

func (x *HvacSeatHeaterActions_HvacSeatHeaterAction) GetCAR_SEAT_REAR_RIGHT() *Void {
	if x, ok := x.GetSeatPosition().(*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_REAR_RIGHT); ok {
		return x.CAR_SEAT_REAR_RIGHT
	}
	return nil
}

func (x *HvacSeatHeaterActions_HvacSeatHeaterAction) GetCAR_SEAT_REAR_RIGHT_BACK() *Void {
	if x, ok := x.GetSeatPosition().(*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_REAR_RIGHT_BACK); ok {
		return x.CAR_SEAT_REAR_RIGHT_BACK
	}
	return nil
}

func (x *HvacSeatHeaterActions_HvacSeatHeaterAction) GetCAR_SEAT_THIRD_ROW_LEFT() *Void {
	if x, ok := x.GetSeatPosition().(*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_THIRD_ROW_LEFT); ok {
		return x.CAR_SEAT_THIRD_ROW_LEFT
	}
	return nil
}

func (x *HvacSeatHeaterActions_HvacSeatHeaterAction) GetCAR_SEAT_THIRD_ROW_RIGHT() *Void {
	if x, ok := x.GetSeatPosition().(*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_THIRD_ROW_RIGHT); ok {
		return x.CAR_SEAT_THIRD_ROW_RIGHT
	}
	return nil
}

type isHvacSeatHeaterActions_HvacSeatHeaterAction_SeatHeaterLevel interface {
	isHvacSeatHeaterActions_HvacSeatHeaterAction_SeatHeaterLevel()
}

type HvacSeatHeaterActions_HvacSeatHeaterAction_SEAT_HEATER_UNKNOWN struct {
	SEAT_HEATER_UNKNOWN *Void `protobuf:"bytes,1,opt,name=SEAT_HEATER_UNKNOWN,json=SEATHEATERUNKNOWN,proto3,oneof"`
}

type HvacSeatHeaterActions_HvacSeatHeaterAction_SEAT_HEATER_OFF struct {
	SEAT_HEATER_OFF *Void `protobuf:"bytes,2,opt,name=SEAT_HEATER_OFF,json=SEATHEATEROFF,proto3,oneof"`
}

type HvacSeatHeaterActions_HvacSeatHeaterAction_SEAT_HEATER_LOW struct {
	SEAT_HEATER_LOW *Void `protobuf:"bytes,3,opt,name=SEAT_HEATER_LOW,json=SEATHEATERLOW,proto3,oneof"`
}

type HvacSeatHeaterActions_HvacSeatHeaterAction_SEAT_HEATER_MED struct {
	SEAT_HEATER_MED *Void `protobuf:"bytes,4,opt,name=SEAT_HEATER_MED,json=SEATHEATERMED,proto3,oneof"`
}

type HvacSeatHeaterActions_HvacSeatHeaterAction_SEAT_HEATER_HIGH struct {
	SEAT_HEATER_HIGH *Void `protobuf:"bytes,5,opt,name=SEAT_HEATER_HIGH,json=SEATHEATERHIGH,proto3,oneof"`
}

func (*HvacSeatHeaterActions_HvacSeatHeaterAction_SEAT_HEATER_UNKNOWN) isHvacSeatHeaterActions_HvacSeatHeaterAction_SeatHeaterLevel() {
}

func (*HvacSeatHeaterActions_HvacSeatHeaterAction_SEAT_HEATER_OFF) isHvacSeatHeaterActions_HvacSeatHeaterAction_SeatHeaterLevel() {
}

func (*HvacSeatHeaterActions_HvacSeatHeaterAction_SEAT_HEATER_LOW) isHvacSeatHeaterActions_HvacSeatHeaterAction_SeatHeaterLevel() {
}

func (*HvacSeatHeaterActions_HvacSeatHeaterAction_SEAT_HEATER_MED) isHvacSeatHeaterActions_HvacSeatHeaterAction_SeatHeaterLevel() {
}

func (*HvacSeatHeaterActions_HvacSeatHeaterAction_SEAT_HEATER_HIGH) isHvacSeatHeaterActions_HvacSeatHeaterAction_SeatHeaterLevel() {
}

type isHvacSeatHeaterActions_HvacSeatHeaterAction_SeatPosition interface {
	isHvacSeatHeaterActions_HvacSeatHeaterAction_SeatPosition()
}

type HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_UNKNOWN struct {
	CAR_SEAT_UNKNOWN *Void `protobuf:"bytes,6,opt,name=CAR_SEAT_UNKNOWN,json=CARSEATUNKNOWN,proto3,oneof"`
}

type HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_FRONT_LEFT struct {
	CAR_SEAT_FRONT_LEFT *Void `protobuf:"bytes,7,opt,name=CAR_SEAT_FRONT_LEFT,json=CARSEATFRONTLEFT,proto3,oneof"`
}

type HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_FRONT_RIGHT struct {
	CAR_SEAT_FRONT_RIGHT *Void `protobuf:"bytes,8,opt,name=CAR_SEAT_FRONT_RIGHT,json=CARSEATFRONTRIGHT,proto3,oneof"`
}

type HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_REAR_LEFT struct {
	CAR_SEAT_REAR_LEFT *Void `protobuf:"bytes,9,opt,name=CAR_SEAT_REAR_LEFT,json=CARSEATREARLEFT,proto3,oneof"`
}

type HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_REAR_LEFT_BACK struct {
	CAR_SEAT_REAR_LEFT_BACK *Void `protobuf:"bytes,10,opt,name=CAR_SEAT_REAR_LEFT_BACK,json=CARSEATREARLEFTBACK,proto3,oneof"`
}

type HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_REAR_CENTER struct {
	CAR_SEAT_REAR_CENTER *Void `protobuf:"bytes,11,opt,name=CAR_SEAT_REAR_CENTER,json=CARSEATREARCENTER,proto3,oneof"`
}

type HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_REAR_RIGHT struct {
	CAR_SEAT_REAR_RIGHT *Void `protobuf:"bytes,12,opt,name=CAR_SEAT_REAR_RIGHT,json=CARSEATREARRIGHT,proto3,oneof"`
}

type HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_REAR_RIGHT_BACK struct {
	CAR_SEAT_REAR_RIGHT_BACK *Void `protobuf:"bytes,13,opt,name=CAR_SEAT_REAR_RIGHT_BACK,json=CARSEATREARRIGHTBACK,proto3,oneof"`
}

type HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_THIRD_ROW_LEFT struct {
	CAR_SEAT_THIRD_ROW_LEFT *Void `protobuf:"bytes,14,opt,name=CAR_SEAT_THIRD_ROW_LEFT,json=CARSEATTHIRDROWLEFT,proto3,oneof"`
}

type HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_THIRD_ROW_RIGHT struct {
	CAR_SEAT_THIRD_ROW_RIGHT *Void `protobuf:"bytes,15,opt,name=CAR_SEAT_THIRD_ROW_RIGHT,json=CARSEATTHIRDROWRIGHT,proto3,oneof"`
}

func (*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_UNKNOWN) isHvacSeatHeaterActions_HvacSeatHeaterAction_SeatPosition() {
}

func (*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_FRONT_LEFT) isHvacSeatHeaterActions_HvacSeatHeaterAction_SeatPosition() {
}

func (*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_FRONT_RIGHT) isHvacSeatHeaterActions_HvacSeatHeaterAction_SeatPosition() {
}

func (*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_REAR_LEFT) isHvacSeatHeaterActions_HvacSeatHeaterAction_SeatPosition() {
}

func (*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_REAR_LEFT_BACK) isHvacSeatHeaterActions_HvacSeatHeaterAction_SeatPosition() {
}

func (*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_REAR_CENTER) isHvacSeatHeaterActions_HvacSeatHeaterAction_SeatPosition() {
}

func (*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_REAR_RIGHT) isHvacSeatHeaterActions_HvacSeatHeaterAction_SeatPosition() {
}

func (*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_REAR_RIGHT_BACK) isHvacSeatHeaterActions_HvacSeatHeaterAction_SeatPosition() {
}

func (*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_THIRD_ROW_LEFT) isHvacSeatHeaterActions_HvacSeatHeaterAction_SeatPosition() {
}

func (*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_THIRD_ROW_RIGHT) isHvacSeatHeaterActions_HvacSeatHeaterAction_SeatPosition() {
}

type HvacSeatCoolerActions_HvacSeatCoolerAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SeatCoolerLevel HvacSeatCoolerActions_HvacSeatCoolerLevel_E    `protobuf:"varint,1,opt,name=seat_cooler_level,json=seatCoolerLevel,proto3,enum=CarServer.HvacSeatCoolerActions_HvacSeatCoolerLevel_E" json:"seat_cooler_level,omitempty"`
	SeatPosition    HvacSeatCoolerActions_HvacSeatCoolerPosition_E `protobuf:"varint,2,opt,name=seat_position,json=seatPosition,proto3,enum=CarServer.HvacSeatCoolerActions_HvacSeatCoolerPosition_E" json:"seat_position,omitempty"`
}

func (x *HvacSeatCoolerActions_HvacSeatCoolerAction) Reset() {
	*x = HvacSeatCoolerActions_HvacSeatCoolerAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HvacSeatCoolerActions_HvacSeatCoolerAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HvacSeatCoolerActions_HvacSeatCoolerAction) ProtoMessage() {}

func (x *HvacSeatCoolerActions_HvacSeatCoolerAction) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HvacSeatCoolerActions_HvacSeatCoolerAction.ProtoReflect.Descriptor instead.
func (*HvacSeatCoolerActions_HvacSeatCoolerAction) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{14, 0}
}

func (x *HvacSeatCoolerActions_HvacSeatCoolerAction) GetSeatCoolerLevel() HvacSeatCoolerActions_HvacSeatCoolerLevel_E {
	if x != nil {
		return x.SeatCoolerLevel
	}
	return HvacSeatCoolerActions_HvacSeatCoolerLevel_Unknown
}

func (x *HvacSeatCoolerActions_HvacSeatCoolerAction) GetSeatPosition() HvacSeatCoolerActions_HvacSeatCoolerPosition_E {
	if x != nil {
		return x.SeatPosition
	}
	return HvacSeatCoolerActions_HvacSeatCoolerPosition_Unknown
}

type HvacTemperatureAdjustmentAction_Temperature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*HvacTemperatureAdjustmentAction_Temperature_TEMP_UNKNOWN
	//	*HvacTemperatureAdjustmentAction_Temperature_TEMP_MIN
	//	*HvacTemperatureAdjustmentAction_Temperature_TEMP_MAX
	Type isHvacTemperatureAdjustmentAction_Temperature_Type `protobuf_oneof:"type"`
}

func (x *HvacTemperatureAdjustmentAction_Temperature) Reset() {
	*x = HvacTemperatureAdjustmentAction_Temperature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HvacTemperatureAdjustmentAction_Temperature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HvacTemperatureAdjustmentAction_Temperature) ProtoMessage() {}

func (x *HvacTemperatureAdjustmentAction_Temperature) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HvacTemperatureAdjustmentAction_Temperature.ProtoReflect.Descriptor instead.
func (*HvacTemperatureAdjustmentAction_Temperature) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{17, 0}
}

func (m *HvacTemperatureAdjustmentAction_Temperature) GetType() isHvacTemperatureAdjustmentAction_Temperature_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *HvacTemperatureAdjustmentAction_Temperature) GetTEMP_UNKNOWN() *Void {
	if x, ok := x.GetType().(*HvacTemperatureAdjustmentAction_Temperature_TEMP_UNKNOWN); ok {
		return x.TEMP_UNKNOWN
	}
	return nil
}

func (x *HvacTemperatureAdjustmentAction_Temperature) GetTEMP_MIN() *Void {
	if x, ok := x.GetType().(*HvacTemperatureAdjustmentAction_Temperature_TEMP_MIN); ok {
		return x.TEMP_MIN
	}
	return nil
}

func (x *HvacTemperatureAdjustmentAction_Temperature) GetTEMP_MAX() *Void {
	if x, ok := x.GetType().(*HvacTemperatureAdjustmentAction_Temperature_TEMP_MAX); ok {
		return x.TEMP_MAX
	}
	return nil
}

type isHvacTemperatureAdjustmentAction_Temperature_Type interface {
	isHvacTemperatureAdjustmentAction_Temperature_Type()
}

type HvacTemperatureAdjustmentAction_Temperature_TEMP_UNKNOWN struct {
	TEMP_UNKNOWN *Void `protobuf:"bytes,1,opt,name=TEMP_UNKNOWN,json=TEMPUNKNOWN,proto3,oneof"`
}

type HvacTemperatureAdjustmentAction_Temperature_TEMP_MIN struct {
	TEMP_MIN *Void `protobuf:"bytes,2,opt,name=TEMP_MIN,json=TEMPMIN,proto3,oneof"`
}

type HvacTemperatureAdjustmentAction_Temperature_TEMP_MAX struct {
	TEMP_MAX *Void `protobuf:"bytes,3,opt,name=TEMP_MAX,json=TEMPMAX,proto3,oneof"`
}

func (*HvacTemperatureAdjustmentAction_Temperature_TEMP_UNKNOWN) isHvacTemperatureAdjustmentAction_Temperature_Type() {
}

func (*HvacTemperatureAdjustmentAction_Temperature_TEMP_MIN) isHvacTemperatureAdjustmentAction_Temperature_Type() {
}

func (*HvacTemperatureAdjustmentAction_Temperature_TEMP_MAX) isHvacTemperatureAdjustmentAction_Temperature_Type() {
}

type HvacTemperatureAdjustmentAction_HvacTemperatureZone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//
	//	*HvacTemperatureAdjustmentAction_HvacTemperatureZone_TEMP_ZONE_UNKNOWN
	//	*HvacTemperatureAdjustmentAction_HvacTemperatureZone_TEMP_ZONE_FRONT_LEFT
	//	*HvacTemperatureAdjustmentAction_HvacTemperatureZone_TEMP_ZONE_FRONT_RIGHT
	//	*HvacTemperatureAdjustmentAction_HvacTemperatureZone_TEMP_ZONE_REAR
	Type isHvacTemperatureAdjustmentAction_HvacTemperatureZone_Type `protobuf_oneof:"type"`
}

func (x *HvacTemperatureAdjustmentAction_HvacTemperatureZone) Reset() {
	*x = HvacTemperatureAdjustmentAction_HvacTemperatureZone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HvacTemperatureAdjustmentAction_HvacTemperatureZone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HvacTemperatureAdjustmentAction_HvacTemperatureZone) ProtoMessage() {}

func (x *HvacTemperatureAdjustmentAction_HvacTemperatureZone) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HvacTemperatureAdjustmentAction_HvacTemperatureZone.ProtoReflect.Descriptor instead.
func (*HvacTemperatureAdjustmentAction_HvacTemperatureZone) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{17, 1}
}

func (m *HvacTemperatureAdjustmentAction_HvacTemperatureZone) GetType() isHvacTemperatureAdjustmentAction_HvacTemperatureZone_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *HvacTemperatureAdjustmentAction_HvacTemperatureZone) GetTEMP_ZONE_UNKNOWN() *Void {
	if x, ok := x.GetType().(*HvacTemperatureAdjustmentAction_HvacTemperatureZone_TEMP_ZONE_UNKNOWN); ok {
		return x.TEMP_ZONE_UNKNOWN
	}
	return nil
}

func (x *HvacTemperatureAdjustmentAction_HvacTemperatureZone) GetTEMP_ZONE_FRONT_LEFT() *Void {
	if x, ok := x.GetType().(*HvacTemperatureAdjustmentAction_HvacTemperatureZone_TEMP_ZONE_FRONT_LEFT); ok {
		return x.TEMP_ZONE_FRONT_LEFT
	}
	return nil
}

func (x *HvacTemperatureAdjustmentAction_HvacTemperatureZone) GetTEMP_ZONE_FRONT_RIGHT() *Void {
	if x, ok := x.GetType().(*HvacTemperatureAdjustmentAction_HvacTemperatureZone_TEMP_ZONE_FRONT_RIGHT); ok {
		return x.TEMP_ZONE_FRONT_RIGHT
	}
	return nil
}

func (x *HvacTemperatureAdjustmentAction_HvacTemperatureZone) GetTEMP_ZONE_REAR() *Void {
	if x, ok := x.GetType().(*HvacTemperatureAdjustmentAction_HvacTemperatureZone_TEMP_ZONE_REAR); ok {
		return x.TEMP_ZONE_REAR
	}
	return nil
}

type isHvacTemperatureAdjustmentAction_HvacTemperatureZone_Type interface {
	isHvacTemperatureAdjustmentAction_HvacTemperatureZone_Type()
}

type HvacTemperatureAdjustmentAction_HvacTemperatureZone_TEMP_ZONE_UNKNOWN struct {
	TEMP_ZONE_UNKNOWN *Void `protobuf:"bytes,1,opt,name=TEMP_ZONE_UNKNOWN,json=TEMPZONEUNKNOWN,proto3,oneof"`
}

type HvacTemperatureAdjustmentAction_HvacTemperatureZone_TEMP_ZONE_FRONT_LEFT struct {
	TEMP_ZONE_FRONT_LEFT *Void `protobuf:"bytes,2,opt,name=TEMP_ZONE_FRONT_LEFT,json=TEMPZONEFRONTLEFT,proto3,oneof"`
}

type HvacTemperatureAdjustmentAction_HvacTemperatureZone_TEMP_ZONE_FRONT_RIGHT struct {
	TEMP_ZONE_FRONT_RIGHT *Void `protobuf:"bytes,3,opt,name=TEMP_ZONE_FRONT_RIGHT,json=TEMPZONEFRONTRIGHT,proto3,oneof"`
}

type HvacTemperatureAdjustmentAction_HvacTemperatureZone_TEMP_ZONE_REAR struct {
	TEMP_ZONE_REAR *Void `protobuf:"bytes,4,opt,name=TEMP_ZONE_REAR,json=TEMPZONEREAR,proto3,oneof"`
}

func (*HvacTemperatureAdjustmentAction_HvacTemperatureZone_TEMP_ZONE_UNKNOWN) isHvacTemperatureAdjustmentAction_HvacTemperatureZone_Type() {
}

func (*HvacTemperatureAdjustmentAction_HvacTemperatureZone_TEMP_ZONE_FRONT_LEFT) isHvacTemperatureAdjustmentAction_HvacTemperatureZone_Type() {
}

func (*HvacTemperatureAdjustmentAction_HvacTemperatureZone_TEMP_ZONE_FRONT_RIGHT) isHvacTemperatureAdjustmentAction_HvacTemperatureZone_Type() {
}

func (*HvacTemperatureAdjustmentAction_HvacTemperatureZone_TEMP_ZONE_REAR) isHvacTemperatureAdjustmentAction_HvacTemperatureZone_Type() {
}

type AutoSeatClimateAction_CarSeat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	On           bool                                     `protobuf:"varint,1,opt,name=on,proto3" json:"on,omitempty"`
	SeatPosition AutoSeatClimateAction_AutoSeatPosition_E `protobuf:"varint,2,opt,name=seat_position,json=seatPosition,proto3,enum=CarServer.AutoSeatClimateAction_AutoSeatPosition_E" json:"seat_position,omitempty"`
}

func (x *AutoSeatClimateAction_CarSeat) Reset() {
	*x = AutoSeatClimateAction_CarSeat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_car_server_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AutoSeatClimateAction_CarSeat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AutoSeatClimateAction_CarSeat) ProtoMessage() {}

func (x *AutoSeatClimateAction_CarSeat) ProtoReflect() protoreflect.Message {
	mi := &file_car_server_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AutoSeatClimateAction_CarSeat.ProtoReflect.Descriptor instead.
func (*AutoSeatClimateAction_CarSeat) Descriptor() ([]byte, []int) {
	return file_car_server_proto_rawDescGZIP(), []int{38, 0}
}

func (x *AutoSeatClimateAction_CarSeat) GetOn() bool {
	if x != nil {
		return x.On
	}
	return false
}

func (x *AutoSeatClimateAction_CarSeat) GetSeatPosition() AutoSeatClimateAction_AutoSeatPosition_E {
	if x != nil {
		return x.SeatPosition
	}
	return AutoSeatClimateAction_AutoSeatPosition_Unknown
}

var File_car_server_proto protoreflect.FileDescriptor

var file_car_server_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x61, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x09, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x0d, 0x76,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5e, 0x0a,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x0d, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x73, 0x67, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x06, 0x22, 0xb6, 0x28,
	0x0a, 0x0d, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x5b, 0x0a, 0x16, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x17,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x6f,
	0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x17, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x1f,
	0x64, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x70, 0x65, 0x65,
	0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x1f, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x69, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x1a, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x00, 0x52, 0x1a, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a,
	0x17, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x72, 0x69, 0x76, 0x69,
	0x6e, 0x67, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x64, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a,
	0x0e, 0x68, 0x76, 0x61, 0x63, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0e, 0x68, 0x76, 0x61, 0x63, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x1f, 0x68, 0x76, 0x61, 0x63, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x78, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x43, 0x61,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x53, 0x65, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x78, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1f, 0x68, 0x76, 0x61, 0x63, 0x53,
	0x65, 0x74, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x4d, 0x61, 0x78, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x70, 0x0a, 0x1d, 0x68, 0x76,
	0x61, 0x63, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x48,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x76,
	0x61, 0x63, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x57, 0x68, 0x65, 0x65, 0x6c, 0x48,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1d, 0x68,
	0x76, 0x61, 0x63, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x57, 0x68, 0x65, 0x65, 0x6c,
	0x48, 0x65, 0x61, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x1f,
	0x68, 0x76, 0x61, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41,
	0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x1f, 0x68, 0x76, 0x61, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46, 0x0a, 0x0f, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x6c, 0x61,
	0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50,
	0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x11,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d,
	0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x56,
	0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x4c, 0x0a, 0x11, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x4e, 0x65, 0x78, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4e, 0x65, 0x78, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72,
	0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4e, 0x65, 0x78, 0x74,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x15, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x48, 0x00, 0x52, 0x15, 0x6d, 0x65, 0x64,
	0x69, 0x61, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69,
	0x74, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4e, 0x65, 0x78, 0x74, 0x54,
	0x72, 0x61, 0x63, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x43, 0x61, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x4e, 0x65, 0x78, 0x74,
	0x54, 0x72, 0x61, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0e, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4e, 0x65,
	0x78, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x4f, 0x0a, 0x12, 0x6d, 0x65, 0x64, 0x69, 0x61,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x18, 0x14, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x72, 0x61,
	0x63, 0x6b, 0x48, 0x00, 0x52, 0x12, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x72, 0x65, 0x76, 0x69,
	0x6f, 0x75, 0x73, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x5b, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x4e,
	0x65, 0x61, 0x72, 0x62, 0x79, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x74,
	0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x74, 0x65, 0x73, 0x48, 0x00, 0x52, 0x16, 0x67,
	0x65, 0x74, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x53, 0x69, 0x74, 0x65, 0x73, 0x12, 0x91, 0x01, 0x0a, 0x28, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x28, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x76, 0x0a, 0x1f, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x6c, 0x61, 0x73, 0x68,
	0x4c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x6c, 0x61,
	0x73, 0x68, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x1f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x46, 0x6c, 0x61, 0x73, 0x68, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x6d, 0x0a, 0x1c, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x48, 0x6f, 0x6e, 0x6b, 0x48, 0x6f, 0x72, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x48, 0x6f, 0x6e, 0x6b, 0x48, 0x6f, 0x72, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x1c, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x48, 0x6f, 0x6e, 0x6b, 0x48, 0x6f, 0x72, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x7c, 0x0a, 0x21, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x43, 0x61,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x65, 0x74,
	0x50, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x21, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x97,
	0x01, 0x0a, 0x2a, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x2a, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7c, 0x0a, 0x21, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x53, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65,
	0x74, 0x53, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x21, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x79, 0x0a, 0x20, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x65, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x20, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x65, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x85, 0x01, 0x0a, 0x24, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x53, 0x75, 0x6e, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x70, 0x65, 0x6e, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2f, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x75, 0x6e, 0x72, 0x6f,
	0x6f, 0x66, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x24, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x53, 0x75, 0x6e, 0x72, 0x6f, 0x6f, 0x66, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c,
	0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x82, 0x01, 0x0a, 0x23, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x72, 0x69, 0x67,
	0x67, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x6c, 0x69, 0x6e,
	0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x23, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x48, 0x6f, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67,
	0x0a, 0x1a, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1a, 0x76, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e, 0x0a, 0x17, 0x68, 0x76, 0x61, 0x63, 0x42,
	0x69, 0x6f, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x42, 0x69, 0x6f, 0x77, 0x65, 0x61, 0x70,
	0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17,
	0x68, 0x76, 0x61, 0x63, 0x42, 0x69, 0x6f, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x15, 0x68, 0x76, 0x61, 0x63, 0x53,
	0x65, 0x61, 0x74, 0x48, 0x65, 0x61, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x53, 0x65, 0x61, 0x74, 0x48, 0x65, 0x61, 0x74, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x15, 0x68, 0x76, 0x61, 0x63,
	0x53, 0x65, 0x61, 0x74, 0x48, 0x65, 0x61, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x5e, 0x0a, 0x17, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x61, 0x0a, 0x18, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75,
	0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x15, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x67, 0x41, 0x6d, 0x70, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x70, 0x73, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x73, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x67, 0x41, 0x6d, 0x70, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5e,
	0x0a, 0x17, 0x68, 0x76, 0x61, 0x63, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x65,
	0x70, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x76, 0x61, 0x63,
	0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x17, 0x68, 0x76, 0x61, 0x63, 0x43, 0x6c, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25,
	0x0a, 0x04, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43,
	0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52,
	0x04, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x58, 0x0a, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x61,
	0x74, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x30,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x61, 0x75, 0x74, 0x6f, 0x53, 0x65,
	0x61, 0x74, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x58, 0x0a, 0x15, 0x68, 0x76, 0x61, 0x63, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x53,
	0x65, 0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x48, 0x00, 0x52, 0x15, 0x68, 0x76, 0x61, 0x63, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x79, 0x0a, 0x20, 0x73, 0x65, 0x74,
	0x43, 0x61, 0x62, 0x69, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x53, 0x65, 0x74, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65, 0x61, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x20, 0x73, 0x65, 0x74, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x4f, 0x76, 0x65, 0x72,
	0x68, 0x65, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x55, 0x0a, 0x14, 0x73, 0x65, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x36, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x65, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x14, 0x73, 0x65, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x13, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x6f, 0x72, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x44,
	0x6f, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x48, 0x00, 0x52, 0x13, 0x63, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12,
	0x4f, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x6f,
	0x72, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x43, 0x61,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x44, 0x6f, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x48, 0x00, 0x52, 0x12, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x6e,
	0x12, 0x4d, 0x0a, 0x0f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x43, 0x61, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x2e, 0x47, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x48, 0x00, 0x52, 0x0f,
	0x67, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x49, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x70, 0x54, 0x65, 0x6d, 0x70, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x43, 0x61, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x70, 0x54, 0x65, 0x6d, 0x70,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x10, 0x73, 0x65, 0x74, 0x43, 0x6f, 0x70,
	0x54, 0x65, 0x6d, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x13, 0x65, 0x72,
	0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x45, 0x72, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74,
	0x61, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x13, 0x65, 0x72, 0x61, 0x73, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7c,
	0x0a, 0x21, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x53, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x54, 0x6f, 0x44, 0x72, 0x69, 0x76, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x4d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x43, 0x61, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x54, 0x6f, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x21, 0x76, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x54,
	0x6f, 0x44, 0x72, 0x69, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x82, 0x01, 0x0a,
	0x23, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x54, 0x6f, 0x44, 0x72, 0x69, 0x76, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x43, 0x61, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x54, 0x6f, 0x44,
	0x72, 0x69, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x23, 0x76, 0x65,
	0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x65,
	0x74, 0x50, 0x69, 0x6e, 0x54, 0x6f, 0x44, 0x72, 0x69, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x55, 0x0a, 0x17, 0x61, 0x64, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x61, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52,
	0x17, 0x61, 0x64, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x1a, 0x72, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x43,
	0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x1a, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x67, 0x0a, 0x1d, 0x61, 0x64, 0x64, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x1d, 0x61, 0x64, 0x64,
	0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x79, 0x0a, 0x20, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8b, 0x01, 0x0a, 0x26, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x6b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x26, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x79, 0x0a, 0x20, 0x62, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x20, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x14,
	0x0a, 0x12, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6d, 0x73, 0x67, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x4a, 0x04, 0x08, 0x3c, 0x10, 0x3d,
	0x4a, 0x04, 0x08, 0x4c, 0x10, 0x4d, 0x22, 0x2d, 0x0a, 0x13, 0x45, 0x72, 0x61, 0x73, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0xab, 0x02, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3b, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x51, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x67, 0x65, 0x74, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x58, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4e,
	0x65, 0x61, 0x72, 0x62, 0x79, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x74,
	0x65, 0x73, 0x48, 0x00, 0x52, 0x16, 0x67, 0x65, 0x74, 0x4e, 0x65, 0x61, 0x72, 0x62, 0x79, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x04,
	0x70, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x61, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x04, 0x70,
	0x69, 0x6e, 0x67, 0x42, 0x0e, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f,
	0x6d, 0x73, 0x67, 0x22, 0x82, 0x01, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x45, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x3c, 0x0a, 0x0d, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x39, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0a, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09,
	0x70, 0x6c, 0x61, 0x69, 0x6e, 0x54, 0x65, 0x78, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x22, 0x64, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x69, 0x70, 0x68, 0x65,
	0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x63, 0x69, 0x70,
	0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0x32, 0x0a, 0x16, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x22, 0x9e, 0x02,
	0x0a, 0x17, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53,
	0x74, 0x6f, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x61, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x48, 0x00, 0x52, 0x07, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x48, 0x00, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12,
	0x38, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x61, 0x72, 0x64, 0x12, 0x39, 0x0a, 0x0f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56,
	0x6f, 0x69, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x61, 0x78, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56,
	0x6f, 0x69, 0x64, 0x48, 0x00, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x42, 0x11, 0x0a, 0x0f, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x33,
	0x0a, 0x1f, 0x44, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x69, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x70, 0x69, 0x6e, 0x22, 0x39, 0x0a, 0x1a, 0x44, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x6d, 0x70, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x4d, 0x70, 0x68, 0x22, 0x47,
	0x0a, 0x17, 0x44, 0x72, 0x69, 0x76, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x65, 0x64, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x22, 0x54, 0x0a, 0x0e, 0x48, 0x76, 0x61, 0x63, 0x41,
	0x75, 0x74, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x6f, 0x77,
	0x65, 0x72, 0x4f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0xa3, 0x09,
	0x0a, 0x15, 0x48, 0x76, 0x61, 0x63, 0x53, 0x65, 0x61, 0x74, 0x48, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x69, 0x0a, 0x14, 0x68, 0x76, 0x61, 0x63, 0x53,
	0x65, 0x61, 0x74, 0x48, 0x65, 0x61, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x53, 0x65, 0x61, 0x74, 0x48, 0x65, 0x61, 0x74, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x53, 0x65, 0x61, 0x74,
	0x48, 0x65, 0x61, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x68, 0x76,
	0x61, 0x63, 0x53, 0x65, 0x61, 0x74, 0x48, 0x65, 0x61, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x9e, 0x08, 0x0a, 0x14, 0x48, 0x76, 0x61, 0x63, 0x53, 0x65, 0x61, 0x74, 0x48,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x13, 0x53,
	0x45, 0x41, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x48, 0x00, 0x52, 0x11, 0x53, 0x45, 0x41,
	0x54, 0x48, 0x45, 0x41, 0x54, 0x45, 0x52, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x12, 0x39,
	0x0a, 0x0f, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x46,
	0x46, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x53, 0x45, 0x41, 0x54,
	0x48, 0x45, 0x41, 0x54, 0x45, 0x52, 0x4f, 0x46, 0x46, 0x12, 0x39, 0x0a, 0x0f, 0x53, 0x45, 0x41,
	0x54, 0x5f, 0x48, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x57, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56,
	0x6f, 0x69, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x53, 0x45, 0x41, 0x54, 0x48, 0x45, 0x41, 0x54, 0x45,
	0x52, 0x4c, 0x4f, 0x57, 0x12, 0x39, 0x0a, 0x0f, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x48, 0x45, 0x41,
	0x54, 0x45, 0x52, 0x5f, 0x4d, 0x45, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x48, 0x00,
	0x52, 0x0d, 0x53, 0x45, 0x41, 0x54, 0x48, 0x45, 0x41, 0x54, 0x45, 0x52, 0x4d, 0x45, 0x44, 0x12,
	0x3b, 0x0a, 0x10, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x48,
	0x49, 0x47, 0x48, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x61, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x53, 0x45,
	0x41, 0x54, 0x48, 0x45, 0x41, 0x54, 0x45, 0x52, 0x48, 0x49, 0x47, 0x48, 0x12, 0x3b, 0x0a, 0x10,
	0x43, 0x41, 0x52, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x48, 0x01, 0x52, 0x0e, 0x43, 0x41, 0x52, 0x53, 0x45,
	0x41, 0x54, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x12, 0x40, 0x0a, 0x13, 0x43, 0x41, 0x52,
	0x5f, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x5f, 0x4c, 0x45, 0x46, 0x54,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x48, 0x01, 0x52, 0x10, 0x43, 0x41, 0x52, 0x53, 0x45,
	0x41, 0x54, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x4c, 0x45, 0x46, 0x54, 0x12, 0x42, 0x0a, 0x14, 0x43,
	0x41, 0x52, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x5f, 0x52, 0x49,
	0x47, 0x48, 0x54, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x61, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x48, 0x01, 0x52, 0x11, 0x43, 0x41,
	0x52, 0x53, 0x45, 0x41, 0x54, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x52, 0x49, 0x47, 0x48, 0x54, 0x12,
	0x3e, 0x0a, 0x12, 0x43, 0x41, 0x52, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x52,
	0x5f, 0x4c, 0x45, 0x46, 0x54, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x61,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x48, 0x01, 0x52, 0x0f,
	0x43, 0x41, 0x52, 0x53, 0x45, 0x41, 0x54, 0x52, 0x45, 0x41, 0x52, 0x4c, 0x45, 0x46, 0x54, 0x12,
	0x47, 0x0a, 0x17, 0x43, 0x41, 0x52, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x52,
	0x5f, 0x4c, 0x45, 0x46, 0x54, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x6f, 0x69,
	0x64, 0x48, 0x01, 0x52, 0x13, 0x43, 0x41, 0x52, 0x53, 0x45, 0x41, 0x54, 0x52, 0x45, 0x41, 0x52,
	0x4c, 0x45, 0x46, 0x54, 0x42, 0x41, 0x43, 0x4b, 0x12, 0x42, 0x0a, 0x14, 0x43, 0x41, 0x52, 0x5f,
	0x53, 0x45, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x52, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x48, 0x01, 0x52, 0x11, 0x43, 0x41, 0x52, 0x53, 0x45,
	0x41, 0x54, 0x52, 0x45, 0x41, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x12, 0x40, 0x0a, 0x13,
	0x43, 0x41, 0x52, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x52, 0x5f, 0x52, 0x49,
	0x47, 0x48, 0x54, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x61, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x48, 0x01, 0x52, 0x10, 0x43, 0x41,
	0x52, 0x53, 0x45, 0x41, 0x54, 0x52, 0x45, 0x41, 0x52, 0x52, 0x49, 0x47, 0x48, 0x54, 0x12, 0x49,
	0x0a, 0x18, 0x43, 0x41, 0x52, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x52, 0x5f,
	0x52, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x42, 0x41, 0x43, 0x4b, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x6f, 0x69,
	0x64, 0x48, 0x01, 0x52, 0x14, 0x43, 0x41, 0x52, 0x53, 0x45, 0x41, 0x54, 0x52, 0x45, 0x41, 0x52,
	0x52, 0x49, 0x47, 0x48, 0x54, 0x42, 0x41, 0x43, 0x4b, 0x12, 0x47, 0x0a, 0x17, 0x43, 0x41, 0x52,
	0x5f, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x54, 0x48, 0x49, 0x52, 0x44, 0x5f, 0x52, 0x4f, 0x57, 0x5f,
	0x4c, 0x45, 0x46, 0x54, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x61, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x48, 0x01, 0x52, 0x13, 0x43,
	0x41, 0x52, 0x53, 0x45, 0x41, 0x54, 0x54, 0x48, 0x49, 0x52, 0x44, 0x52, 0x4f, 0x57, 0x4c, 0x45,
	0x46, 0x54, 0x12, 0x49, 0x0a, 0x18, 0x43, 0x41, 0x52, 0x5f, 0x53, 0x45, 0x41, 0x54, 0x5f, 0x54,
	0x48, 0x49, 0x52, 0x44, 0x5f, 0x52, 0x4f, 0x57, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x56, 0x6f, 0x69, 0x64, 0x48, 0x01, 0x52, 0x14, 0x43, 0x41, 0x52, 0x53, 0x45, 0x41, 0x54,
	0x54, 0x48, 0x49, 0x52, 0x44, 0x52, 0x4f, 0x57, 0x52, 0x49, 0x47, 0x48, 0x54, 0x42, 0x13, 0x0a,
	0x11, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x42, 0x0f, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x05, 0x0a, 0x15, 0x48, 0x76, 0x61, 0x63, 0x53, 0x65, 0x61, 0x74,
	0x43, 0x6f, 0x6f, 0x6c, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x69, 0x0a,
	0x14, 0x68, 0x76, 0x61, 0x63, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x43, 0x61,
	0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x53, 0x65, 0x61, 0x74,
	0x43, 0x6f, 0x6f, 0x6c, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x48, 0x76,
	0x61, 0x63, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x14, 0x68, 0x76, 0x61, 0x63, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xda, 0x01, 0x0a, 0x14, 0x48, 0x76, 0x61,
	0x63, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x62, 0x0a, 0x11, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x63, 0x6f, 0x6f, 0x6c, 0x65, 0x72,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x43,
	0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x53, 0x65, 0x61,
	0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x48,
	0x76, 0x61, 0x63, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x65, 0x72, 0x4c, 0x65, 0x76,
	0x65, 0x6c, 0x5f, 0x45, 0x52, 0x0f, 0x73, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x65, 0x72,
	0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x5e, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x43,
	0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x53, 0x65, 0x61,
	0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x48,
	0x76, 0x61, 0x63, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x52, 0x0c, 0x73, 0x65, 0x61, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xad, 0x01, 0x0a, 0x15, 0x48, 0x76, 0x61, 0x63, 0x53, 0x65,
	0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x45, 0x12,
	0x1f, 0x0a, 0x1b, 0x48, 0x76, 0x61, 0x63, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x65,
	0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00,
	0x12, 0x1b, 0x0a, 0x17, 0x48, 0x76, 0x61, 0x63, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c,
	0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x4f, 0x66, 0x66, 0x10, 0x01, 0x12, 0x1b, 0x0a,
	0x17, 0x48, 0x76, 0x61, 0x63, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x65, 0x72, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x4c, 0x6f, 0x77, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x48, 0x76,
	0x61, 0x63, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x5f, 0x4d, 0x65, 0x64, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x48, 0x76, 0x61, 0x63, 0x53,
	0x65, 0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x48,
	0x69, 0x67, 0x68, 0x10, 0x04, 0x22, 0x8b, 0x01, 0x0a, 0x18, 0x48, 0x76, 0x61, 0x63, 0x53, 0x65,
	0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x45, 0x12, 0x22, 0x0a, 0x1e, 0x48, 0x76, 0x61, 0x63, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6f,
	0x6f, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x55, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x24, 0x0a, 0x20, 0x48, 0x76, 0x61, 0x63, 0x53, 0x65,
	0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x01, 0x12, 0x25, 0x0a, 0x21,
	0x48, 0x76, 0x61, 0x63, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6f, 0x6f, 0x6c, 0x65, 0x72, 0x50, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x52, 0x69, 0x67, 0x68,
	0x74, 0x10, 0x02, 0x22, 0x86, 0x02, 0x0a, 0x1f, 0x48, 0x76, 0x61, 0x63, 0x53, 0x65, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x4d, 0x61,
	0x78, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x12, 0x71, 0x0a, 0x14, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72,
	0x69, 0x64, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x3f,
	0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x53,
	0x65, 0x74, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x4d, 0x61, 0x78, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x6e, 0x75, 0x61,
	0x6c, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x52,
	0x12, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x22, 0x37, 0x0a, 0x14, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x45, 0x12, 0x0b, 0x0a, 0x07, 0x44,
	0x6f, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x6f, 0x63, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x6f, 0x6f, 0x72, 0x73, 0x10, 0x02, 0x22, 0x3a, 0x0a, 0x1d,
	0x48, 0x76, 0x61, 0x63, 0x53, 0x74, 0x65, 0x65, 0x72, 0x69, 0x6e, 0x67, 0x57, 0x68, 0x65, 0x65,
	0x6c, 0x48, 0x65, 0x61, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a,
	0x08, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x70, 0x6f, 0x77, 0x65, 0x72, 0x4f, 0x6e, 0x22, 0x8a, 0x07, 0x0a, 0x1f, 0x48, 0x76, 0x61,
	0x63, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x63, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75,
	0x74, 0x65, 0x5f, 0x63, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0f, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75,
	0x73, 0x12, 0x4c, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x76, 0x61,
	0x63, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x64, 0x6a, 0x75,
	0x73, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x72, 0x0a, 0x15, 0x68, 0x76, 0x61, 0x63, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e,
	0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x64, 0x6a, 0x75, 0x73, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x52, 0x13,
	0x68, 0x76, 0x61, 0x63, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5a,
	0x6f, 0x6e, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x74, 0x65,
	0x6d, 0x70, 0x5f, 0x63, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x11, 0x64, 0x72, 0x69, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x43, 0x65, 0x6c, 0x73,
	0x69, 0x75, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x5f, 0x63, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x14, 0x70, 0x61, 0x73, 0x73, 0x65, 0x6e, 0x67, 0x65, 0x72, 0x54, 0x65,
	0x6d, 0x70, 0x43, 0x65, 0x6c, 0x73, 0x69, 0x75, 0x73, 0x1a, 0xa7, 0x01, 0x0a, 0x0b, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x0c, 0x54, 0x45, 0x4d,
	0x50, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64,
	0x48, 0x00, 0x52, 0x0b, 0x54, 0x45, 0x4d, 0x50, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x12,
	0x2c, 0x0a, 0x08, 0x54, 0x45, 0x4d, 0x50, 0x5f, 0x4d, 0x49, 0x4e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x6f,
	0x69, 0x64, 0x48, 0x00, 0x52, 0x07, 0x54, 0x45, 0x4d, 0x50, 0x4d, 0x49, 0x4e, 0x12, 0x2c, 0x0a,
	0x08, 0x54, 0x45, 0x4d, 0x50, 0x5f, 0x4d, 0x41, 0x58, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64,
	0x48, 0x00, 0x52, 0x07, 0x54, 0x45, 0x4d, 0x50, 0x4d, 0x41, 0x58, 0x42, 0x06, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x1a, 0x9f, 0x02, 0x0a, 0x13, 0x48, 0x76, 0x61, 0x63, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x3d, 0x0a, 0x11, 0x54,
	0x45, 0x4d, 0x50, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x54, 0x45, 0x4d, 0x50, 0x5a,
	0x4f, 0x4e, 0x45, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x12, 0x42, 0x0a, 0x14, 0x54, 0x45,
	0x4d, 0x50, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x5f, 0x4c, 0x45,
	0x46, 0x54, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x48, 0x00, 0x52, 0x11, 0x54, 0x45, 0x4d,
	0x50, 0x5a, 0x4f, 0x4e, 0x45, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x4c, 0x45, 0x46, 0x54, 0x12, 0x44,
	0x0a, 0x15, 0x54, 0x45, 0x4d, 0x50, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x46, 0x52, 0x4f, 0x4e,
	0x54, 0x5f, 0x52, 0x49, 0x47, 0x48, 0x54, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x48, 0x00,
	0x52, 0x12, 0x54, 0x45, 0x4d, 0x50, 0x5a, 0x4f, 0x4e, 0x45, 0x46, 0x52, 0x4f, 0x4e, 0x54, 0x52,
	0x49, 0x47, 0x48, 0x54, 0x12, 0x37, 0x0a, 0x0e, 0x54, 0x45, 0x4d, 0x50, 0x5f, 0x5a, 0x4f, 0x4e,
	0x45, 0x5f, 0x52, 0x45, 0x41, 0x52, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43,
	0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x48, 0x00, 0x52,
	0x0c, 0x54, 0x45, 0x4d, 0x50, 0x5a, 0x4f, 0x4e, 0x45, 0x52, 0x45, 0x41, 0x52, 0x42, 0x06, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x72, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x61, 0x72,
	0x62, 0x79, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x74, 0x65, 0x73, 0x12,
	0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x61, 0x64, 0x69, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xd1, 0x01, 0x0a, 0x13, 0x4e, 0x65,
	0x61, 0x72, 0x62, 0x79, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x69, 0x74, 0x65,
	0x73, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x3e, 0x0a, 0x0d, 0x73,
	0x75, 0x70, 0x65, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53,
	0x75, 0x70, 0x65, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x73, 0x52, 0x0d, 0x73, 0x75,
	0x70, 0x65, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x73, 0x12, 0x40, 0x0a, 0x1d, 0x63,
	0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x75, 0x74, 0x63, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x19, 0x63, 0x6f, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x79,
	0x6e, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x74, 0x63, 0x53, 0x65, 0x63, 0x73, 0x22, 0xc0, 0x05,
	0x0a, 0x0d, 0x53, 0x75, 0x70, 0x65, 0x72, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x73, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x6d, 0x65, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x61, 0x6d, 0x65, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x62,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x25, 0x0a, 0x0e,
	0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4d, 0x69,
	0x6c, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x12,
	0x2e, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x4c, 0x61,
	0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x73, 0x69, 0x74, 0x65, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73,
	0x74, 0x72, 0x65, 0x65, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x65, 0x65, 0x74, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53,
	0x74, 0x61, 0x6c, 0x6c, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x5f,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x77, 0x69, 0x74,
	0x68, 0x69, 0x6e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x5f, 0x6b, 0x77, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x6d, 0x61, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4b, 0x77, 0x12, 0x3a, 0x0a, 0x1a, 0x6f, 0x75,
	0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x73, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16,
	0x6f, 0x75, 0x74, 0x4f, 0x66, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x73,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x38, 0x0a, 0x19, 0x6f, 0x75, 0x74, 0x5f, 0x6f, 0x66,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x6f, 0x75, 0x74, 0x4f, 0x66,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6c, 0x6c, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x22, 0x11, 0x0a, 0x0f, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x6c, 0x61, 0x79, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x84, 0x01, 0x0a, 0x11, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x76, 0x6f, 0x6c,
	0x75, 0x6d, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x48,
	0x00, 0x52, 0x0b, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x34,
	0x0a, 0x15, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74,
	0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52,
	0x13, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x41, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x13, 0x0a, 0x11, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x4e, 0x65, 0x78, 0x74, 0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x22,
	0x17, 0x0a, 0x15, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73,
	0x46, 0x61, 0x76, 0x6f, 0x72, 0x69, 0x74, 0x65, 0x22, 0x10, 0x0a, 0x0e, 0x4d, 0x65, 0x64, 0x69,
	0x61, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x22, 0x14, 0x0a, 0x12, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x22, 0x2a, 0x0a, 0x28, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x53, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x21, 0x0a, 0x1f,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x46, 0x6c,
	0x61, 0x73, 0x68, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x1e, 0x0a, 0x1c, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x48, 0x6f, 0x6e, 0x6b, 0x48, 0x6f, 0x72, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x23, 0x0a, 0x21, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x2a, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x5f, 0x73, 0x65, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x53, 0x65,
	0x63, 0x22, 0x33, 0x0a, 0x21, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x53, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x02, 0x6f, 0x6e, 0x22, 0x4e, 0x0a, 0x20, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x65, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x84, 0x02, 0x0a, 0x24, 0x56, 0x65, 0x68, 0x69, 0x63,
	0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x75, 0x6e, 0x72, 0x6f, 0x6f, 0x66,
	0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x0e, 0x61, 0x62, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0d, 0x61, 0x62, 0x73, 0x6f, 0x6c,
	0x75, 0x74, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x74,
	0x61, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x48, 0x00, 0x52,
	0x0a, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x04, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x61, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x48, 0x01, 0x52, 0x04, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x27, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x6f,
	0x69, 0x64, 0x48, 0x01, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x6f,
	0x70, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x61, 0x72, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x48, 0x01, 0x52, 0x04, 0x6f, 0x70,
	0x65, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x73, 0x75, 0x6e, 0x72, 0x6f, 0x6f, 0x66, 0x5f, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6b, 0x0a,
	0x23, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54,
	0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x48, 0x6f, 0x6d, 0x65, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x4c, 0x61, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0xa9, 0x01, 0x0a, 0x1a, 0x56,
	0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x07, 0x75, 0x6e, 0x6b,
	0x6e, 0x6f, 0x77, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x61, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x48, 0x00, 0x52, 0x07, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x25, 0x0a, 0x04, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x56, 0x6f, 0x69, 0x64, 0x48, 0x00, 0x52, 0x04, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x27, 0x0a,
	0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x43,
	0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x6f, 0x69, 0x64, 0x48, 0x00, 0x52,
	0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22, 0x52, 0x0a, 0x17, 0x48, 0x76, 0x61, 0x63, 0x42, 0x69,
	0x6f, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x6f, 0x76, 0x65, 0x72,
	0x72, 0x69, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x75,
	0x61, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0xc5, 0x02, 0x0a, 0x15, 0x41,
	0x75, 0x74, 0x6f, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x73, 0x65, 0x61, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x61, 0x74, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x61, 0x74, 0x52,
	0x07, 0x63, 0x61, 0x72, 0x73, 0x65, 0x61, 0x74, 0x1a, 0x73, 0x0a, 0x07, 0x43, 0x61, 0x72, 0x53,
	0x65, 0x61, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x02, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x0d, 0x73, 0x65, 0x61, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x43, 0x61, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x61, 0x74, 0x43,
	0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x75, 0x74,
	0x6f, 0x53, 0x65, 0x61, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x52,
	0x0c, 0x73, 0x65, 0x61, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x73, 0x0a,
	0x12, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x61, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x45, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x61, 0x74, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10,
	0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x61, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x4c, 0x65, 0x66, 0x74, 0x10,
	0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x65, 0x61, 0x74, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x10, 0x02, 0x22, 0xb4, 0x01, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x70, 0x69,
	0x6e, 0x67, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x4e, 0x0a, 0x15, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x58, 0x0a, 0x17, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x23,
	0x0a, 0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xbf, 0x02, 0x0a, 0x18, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x64, 0x44, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x64, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0d, 0x64, 0x65, 0x70, 0x61, 0x72, 0x74, 0x75, 0x72, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x54, 0x0a, 0x15, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x72, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x52, 0x14, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x69,
	0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12, 0x56, 0x0a, 0x17, 0x6f, 0x66, 0x66, 0x5f, 0x70,
	0x65, 0x61, 0x6b, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x4f, 0x66, 0x66, 0x50, 0x65, 0x61, 0x6b, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x52, 0x14, 0x6f, 0x66, 0x66, 0x50, 0x65,
	0x61, 0x6b, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x12,
	0x34, 0x0a, 0x17, 0x6f, 0x66, 0x66, 0x5f, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x68, 0x6f, 0x75, 0x72,
	0x73, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x13, 0x6f, 0x66, 0x66, 0x50, 0x65, 0x61, 0x6b, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xbc, 0x02, 0x0a, 0x17, 0x48, 0x76, 0x61, 0x63, 0x43, 0x6c,
	0x69, 0x6d, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x6a, 0x0a, 0x13, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x65, 0x70,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x38,
	0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x48, 0x76, 0x61, 0x63, 0x43,
	0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45, 0x52, 0x13, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a,
	0x0f, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x15, 0x43, 0x6c, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x45,
	0x12, 0x1b, 0x0a, 0x17, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x65,
	0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x66, 0x66, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x4f, 0x6e, 0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x6c, 0x69,
	0x6d, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x44, 0x6f, 0x67, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74,
	0x65, 0x4b, 0x65, 0x65, 0x70, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x43, 0x61,
	0x6d, 0x70, 0x10, 0x03, 0x22, 0x3c, 0x0a, 0x15, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x67, 0x41, 0x6d, 0x70, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6d, 0x70, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x41, 0x6d,
	0x70, 0x73, 0x22, 0x2c, 0x0a, 0x1a, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x60, 0x0a, 0x20, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05,
	0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x22, 0x66, 0x0a, 0x26, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x68, 0x6f, 0x6d, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x22, 0x32, 0x0a, 0x20, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x4d,
	0x0a, 0x20, 0x53, 0x65, 0x74, 0x43, 0x61, 0x62, 0x69, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x68, 0x65,
	0x61, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02,
	0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x66, 0x61, 0x6e, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66, 0x61, 0x6e, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x38, 0x0a,
	0x14, 0x53, 0x65, 0x74, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x76, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x50, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x6f, 0x72, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x22, 0x14,
	0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x44, 0x6f, 0x6f, 0x72,
	0x4f, 0x70, 0x65, 0x6e, 0x22, 0x6b, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x43, 0x6f, 0x70, 0x54, 0x65,
	0x6d, 0x70, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x57, 0x0a, 0x11, 0x63, 0x6f, 0x70, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x43, 0x61, 0x72, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x70,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x52, 0x11,
	0x63, 0x6f, 0x70, 0x41, 0x63, 0x74, 0x69, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x65, 0x6d,
	0x70, 0x22, 0x4f, 0x0a, 0x21, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x74,
	0x72, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x54, 0x6f, 0x44, 0x72, 0x69, 0x76, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x02, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x22, 0x25, 0x0a, 0x23, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x69, 0x6e, 0x54, 0x6f, 0x44, 0x72,
	0x69, 0x76, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x46, 0x0a, 0x11, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x45, 0x12, 0x16,
	0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x01, 0x42, 0x6e, 0x0a, 0x24, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x6c, 0x61, 0x2e, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x63, 0x61, 0x72, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5a, 0x46, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x73, 0x6c, 0x61, 0x6d, 0x6f, 0x74, 0x6f, 0x72,
	0x73, 0x2f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x61, 0x72, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_car_server_proto_rawDescOnce sync.Once
	file_car_server_proto_rawDescData = file_car_server_proto_rawDesc
)

func file_car_server_proto_rawDescGZIP() []byte {
	file_car_server_proto_rawDescOnce.Do(func() {
		file_car_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_car_server_proto_rawDescData)
	})
	return file_car_server_proto_rawDescData
}

var file_car_server_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_car_server_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_car_server_proto_goTypes = []interface{}{
	(OperationStatus_E)(0),                                    // 0: CarServer.OperationStatus_E
	(HvacSeatCoolerActions_HvacSeatCoolerLevel_E)(0),          // 1: CarServer.HvacSeatCoolerActions.HvacSeatCoolerLevel_E
	(HvacSeatCoolerActions_HvacSeatCoolerPosition_E)(0),       // 2: CarServer.HvacSeatCoolerActions.HvacSeatCoolerPosition_E
	(HvacSetPreconditioningMaxAction_ManualOverrideMode_E)(0), // 3: CarServer.HvacSetPreconditioningMaxAction.ManualOverrideMode_E
	(AutoSeatClimateAction_AutoSeatPosition_E)(0),             // 4: CarServer.AutoSeatClimateAction.AutoSeatPosition_E
	(HvacClimateKeeperAction_ClimateKeeperAction_E)(0),        // 5: CarServer.HvacClimateKeeperAction.ClimateKeeperAction_E
	(*Action)(nil),                                              // 6: CarServer.Action
	(*VehicleAction)(nil),                                       // 7: CarServer.VehicleAction
	(*EraseUserDataAction)(nil),                                 // 8: CarServer.EraseUserDataAction
	(*Response)(nil),                                            // 9: CarServer.Response
	(*ActionStatus)(nil),                                        // 10: CarServer.ActionStatus
	(*ResultReason)(nil),                                        // 11: CarServer.ResultReason
	(*EncryptedData)(nil),                                       // 12: CarServer.EncryptedData
	(*ChargingSetLimitAction)(nil),                              // 13: CarServer.ChargingSetLimitAction
	(*ChargingStartStopAction)(nil),                             // 14: CarServer.ChargingStartStopAction
	(*DrivingClearSpeedLimitPinAction)(nil),                     // 15: CarServer.DrivingClearSpeedLimitPinAction
	(*DrivingSetSpeedLimitAction)(nil),                          // 16: CarServer.DrivingSetSpeedLimitAction
	(*DrivingSpeedLimitAction)(nil),                             // 17: CarServer.DrivingSpeedLimitAction
	(*HvacAutoAction)(nil),                                      // 18: CarServer.HvacAutoAction
	(*HvacSeatHeaterActions)(nil),                               // 19: CarServer.HvacSeatHeaterActions
	(*HvacSeatCoolerActions)(nil),                               // 20: CarServer.HvacSeatCoolerActions
	(*HvacSetPreconditioningMaxAction)(nil),                     // 21: CarServer.HvacSetPreconditioningMaxAction
	(*HvacSteeringWheelHeaterAction)(nil),                       // 22: CarServer.HvacSteeringWheelHeaterAction
	(*HvacTemperatureAdjustmentAction)(nil),                     // 23: CarServer.HvacTemperatureAdjustmentAction
	(*GetNearbyChargingSites)(nil),                              // 24: CarServer.GetNearbyChargingSites
	(*NearbyChargingSites)(nil),                                 // 25: CarServer.NearbyChargingSites
	(*Superchargers)(nil),                                       // 26: CarServer.Superchargers
	(*MediaPlayAction)(nil),                                     // 27: CarServer.MediaPlayAction
	(*MediaUpdateVolume)(nil),                                   // 28: CarServer.MediaUpdateVolume
	(*MediaNextFavorite)(nil),                                   // 29: CarServer.MediaNextFavorite
	(*MediaPreviousFavorite)(nil),                               // 30: CarServer.MediaPreviousFavorite
	(*MediaNextTrack)(nil),                                      // 31: CarServer.MediaNextTrack
	(*MediaPreviousTrack)(nil),                                  // 32: CarServer.MediaPreviousTrack
	(*VehicleControlCancelSoftwareUpdateAction)(nil),            // 33: CarServer.VehicleControlCancelSoftwareUpdateAction
	(*VehicleControlFlashLightsAction)(nil),                     // 34: CarServer.VehicleControlFlashLightsAction
	(*VehicleControlHonkHornAction)(nil),                        // 35: CarServer.VehicleControlHonkHornAction
	(*VehicleControlResetValetPinAction)(nil),                   // 36: CarServer.VehicleControlResetValetPinAction
	(*VehicleControlScheduleSoftwareUpdateAction)(nil),          // 37: CarServer.VehicleControlScheduleSoftwareUpdateAction
	(*VehicleControlSetSentryModeAction)(nil),                   // 38: CarServer.VehicleControlSetSentryModeAction
	(*VehicleControlSetValetModeAction)(nil),                    // 39: CarServer.VehicleControlSetValetModeAction
	(*VehicleControlSunroofOpenCloseAction)(nil),                // 40: CarServer.VehicleControlSunroofOpenCloseAction
	(*VehicleControlTriggerHomelinkAction)(nil),                 // 41: CarServer.VehicleControlTriggerHomelinkAction
	(*VehicleControlWindowAction)(nil),                          // 42: CarServer.VehicleControlWindowAction
	(*HvacBioweaponModeAction)(nil),                             // 43: CarServer.HvacBioweaponModeAction
	(*AutoSeatClimateAction)(nil),                               // 44: CarServer.AutoSeatClimateAction
	(*Ping)(nil),                                                // 45: CarServer.Ping
	(*ScheduledChargingAction)(nil),                             // 46: CarServer.ScheduledChargingAction
	(*ScheduledDepartureAction)(nil),                            // 47: CarServer.ScheduledDepartureAction
	(*HvacClimateKeeperAction)(nil),                             // 48: CarServer.HvacClimateKeeperAction
	(*SetChargingAmpsAction)(nil),                               // 49: CarServer.SetChargingAmpsAction
	(*RemoveChargeScheduleAction)(nil),                          // 50: CarServer.RemoveChargeScheduleAction
	(*BatchRemoveChargeSchedulesAction)(nil),                    // 51: CarServer.BatchRemoveChargeSchedulesAction
	(*BatchRemovePreconditionSchedulesAction)(nil),              // 52: CarServer.BatchRemovePreconditionSchedulesAction
	(*RemovePreconditionScheduleAction)(nil),                    // 53: CarServer.RemovePreconditionScheduleAction
	(*SetCabinOverheatProtectionAction)(nil),                    // 54: CarServer.SetCabinOverheatProtectionAction
	(*SetVehicleNameAction)(nil),                                // 55: CarServer.SetVehicleNameAction
	(*ChargePortDoorClose)(nil),                                 // 56: CarServer.ChargePortDoorClose
	(*ChargePortDoorOpen)(nil),                                  // 57: CarServer.ChargePortDoorOpen
	(*SetCopTempAction)(nil),                                    // 58: CarServer.SetCopTempAction
	(*VehicleControlSetPinToDriveAction)(nil),                   // 59: CarServer.VehicleControlSetPinToDriveAction
	(*VehicleControlResetPinToDriveAction)(nil),                 // 60: CarServer.VehicleControlResetPinToDriveAction
	(*HvacSeatHeaterActions_HvacSeatHeaterAction)(nil),          // 61: CarServer.HvacSeatHeaterActions.HvacSeatHeaterAction
	(*HvacSeatCoolerActions_HvacSeatCoolerAction)(nil),          // 62: CarServer.HvacSeatCoolerActions.HvacSeatCoolerAction
	(*HvacTemperatureAdjustmentAction_Temperature)(nil),         // 63: CarServer.HvacTemperatureAdjustmentAction.Temperature
	(*HvacTemperatureAdjustmentAction_HvacTemperatureZone)(nil), // 64: CarServer.HvacTemperatureAdjustmentAction.HvacTemperatureZone
	(*AutoSeatClimateAction_CarSeat)(nil),                       // 65: CarServer.AutoSeatClimateAction.CarSeat
	(*VehicleState_GuestMode)(nil),                              // 66: CarServer.VehicleState.GuestMode
	(*ChargeSchedule)(nil),                                      // 67: CarServer.ChargeSchedule
	(*PreconditionSchedule)(nil),                                // 68: CarServer.PreconditionSchedule
	(*signatures.SessionInfo)(nil),                              // 69: Signatures.SessionInfo
	(*Void)(nil),                                                // 70: CarServer.Void
	(*timestamppb.Timestamp)(nil),                               // 71: google.protobuf.Timestamp
	(*LatLong)(nil),                                             // 72: CarServer.LatLong
	(*PreconditioningTimes)(nil),                                // 73: CarServer.PreconditioningTimes
	(*OffPeakChargingTimes)(nil),                                // 74: CarServer.OffPeakChargingTimes
	(ClimateState_CopActivationTemp)(0),                         // 75: CarServer.ClimateState.CopActivationTemp
}
var file_car_server_proto_depIdxs = []int32{
	7,   // 0: CarServer.Action.vehicleAction:type_name -> CarServer.VehicleAction
	13,  // 1: CarServer.VehicleAction.chargingSetLimitAction:type_name -> CarServer.ChargingSetLimitAction
	14,  // 2: CarServer.VehicleAction.chargingStartStopAction:type_name -> CarServer.ChargingStartStopAction
	15,  // 3: CarServer.VehicleAction.drivingClearSpeedLimitPinAction:type_name -> CarServer.DrivingClearSpeedLimitPinAction
	16,  // 4: CarServer.VehicleAction.drivingSetSpeedLimitAction:type_name -> CarServer.DrivingSetSpeedLimitAction
	17,  // 5: CarServer.VehicleAction.drivingSpeedLimitAction:type_name -> CarServer.DrivingSpeedLimitAction
	18,  // 6: CarServer.VehicleAction.hvacAutoAction:type_name -> CarServer.HvacAutoAction
	21,  // 7: CarServer.VehicleAction.hvacSetPreconditioningMaxAction:type_name -> CarServer.HvacSetPreconditioningMaxAction
	22,  // 8: CarServer.VehicleAction.hvacSteeringWheelHeaterAction:type_name -> CarServer.HvacSteeringWheelHeaterAction
	23,  // 9: CarServer.VehicleAction.hvacTemperatureAdjustmentAction:type_name -> CarServer.HvacTemperatureAdjustmentAction
	27,  // 10: CarServer.VehicleAction.mediaPlayAction:type_name -> CarServer.MediaPlayAction
	28,  // 11: CarServer.VehicleAction.mediaUpdateVolume:type_name -> CarServer.MediaUpdateVolume
	29,  // 12: CarServer.VehicleAction.mediaNextFavorite:type_name -> CarServer.MediaNextFavorite
	30,  // 13: CarServer.VehicleAction.mediaPreviousFavorite:type_name -> CarServer.MediaPreviousFavorite
	31,  // 14: CarServer.VehicleAction.mediaNextTrack:type_name -> CarServer.MediaNextTrack
	32,  // 15: CarServer.VehicleAction.mediaPreviousTrack:type_name -> CarServer.MediaPreviousTrack
	24,  // 16: CarServer.VehicleAction.getNearbyChargingSites:type_name -> CarServer.GetNearbyChargingSites
	33,  // 17: CarServer.VehicleAction.vehicleControlCancelSoftwareUpdateAction:type_name -> CarServer.VehicleControlCancelSoftwareUpdateAction
	34,  // 18: CarServer.VehicleAction.vehicleControlFlashLightsAction:type_name -> CarServer.VehicleControlFlashLightsAction
	35,  // 19: CarServer.VehicleAction.vehicleControlHonkHornAction:type_name -> CarServer.VehicleControlHonkHornAction
	36,  // 20: CarServer.VehicleAction.vehicleControlResetValetPinAction:type_name -> CarServer.VehicleControlResetValetPinAction
	37,  // 21: CarServer.VehicleAction.vehicleControlScheduleSoftwareUpdateAction:type_name -> CarServer.VehicleControlScheduleSoftwareUpdateAction
	38,  // 22: CarServer.VehicleAction.vehicleControlSetSentryModeAction:type_name -> CarServer.VehicleControlSetSentryModeAction
	39,  // 23: CarServer.VehicleAction.vehicleControlSetValetModeAction:type_name -> CarServer.VehicleControlSetValetModeAction
	40,  // 24: CarServer.VehicleAction.vehicleControlSunroofOpenCloseAction:type_name -> CarServer.VehicleControlSunroofOpenCloseAction
	41,  // 25: CarServer.VehicleAction.vehicleControlTriggerHomelinkAction:type_name -> CarServer.VehicleControlTriggerHomelinkAction
	42,  // 26: CarServer.VehicleAction.vehicleControlWindowAction:type_name -> CarServer.VehicleControlWindowAction
	43,  // 27: CarServer.VehicleAction.hvacBioweaponModeAction:type_name -> CarServer.HvacBioweaponModeAction
	19,  // 28: CarServer.VehicleAction.hvacSeatHeaterActions:type_name -> CarServer.HvacSeatHeaterActions
	46,  // 29: CarServer.VehicleAction.scheduledChargingAction:type_name -> CarServer.ScheduledChargingAction
	47,  // 30: CarServer.VehicleAction.scheduledDepartureAction:type_name -> CarServer.ScheduledDepartureAction
	49,  // 31: CarServer.VehicleAction.setChargingAmpsAction:type_name -> CarServer.SetChargingAmpsAction
	48,  // 32: CarServer.VehicleAction.hvacClimateKeeperAction:type_name -> CarServer.HvacClimateKeeperAction
	45,  // 33: CarServer.VehicleAction.ping:type_name -> CarServer.Ping
	44,  // 34: CarServer.VehicleAction.autoSeatClimateAction:type_name -> CarServer.AutoSeatClimateAction
	20,  // 35: CarServer.VehicleAction.hvacSeatCoolerActions:type_name -> CarServer.HvacSeatCoolerActions
	54,  // 36: CarServer.VehicleAction.setCabinOverheatProtectionAction:type_name -> CarServer.SetCabinOverheatProtectionAction
	55,  // 37: CarServer.VehicleAction.setVehicleNameAction:type_name -> CarServer.SetVehicleNameAction
	56,  // 38: CarServer.VehicleAction.chargePortDoorClose:type_name -> CarServer.ChargePortDoorClose
	57,  // 39: CarServer.VehicleAction.chargePortDoorOpen:type_name -> CarServer.ChargePortDoorOpen
	66,  // 40: CarServer.VehicleAction.guestModeAction:type_name -> CarServer.VehicleState.GuestMode
	58,  // 41: CarServer.VehicleAction.setCopTempAction:type_name -> CarServer.SetCopTempAction
	8,   // 42: CarServer.VehicleAction.eraseUserDataAction:type_name -> CarServer.EraseUserDataAction
	59,  // 43: CarServer.VehicleAction.vehicleControlSetPinToDriveAction:type_name -> CarServer.VehicleControlSetPinToDriveAction
	60,  // 44: CarServer.VehicleAction.vehicleControlResetPinToDriveAction:type_name -> CarServer.VehicleControlResetPinToDriveAction
	67,  // 45: CarServer.VehicleAction.addChargeScheduleAction:type_name -> CarServer.ChargeSchedule
	50,  // 46: CarServer.VehicleAction.removeChargeScheduleAction:type_name -> CarServer.RemoveChargeScheduleAction
	68,  // 47: CarServer.VehicleAction.addPreconditionScheduleAction:type_name -> CarServer.PreconditionSchedule
	53,  // 48: CarServer.VehicleAction.removePreconditionScheduleAction:type_name -> CarServer.RemovePreconditionScheduleAction
	52,  // 49: CarServer.VehicleAction.batchRemovePreconditionSchedulesAction:type_name -> CarServer.BatchRemovePreconditionSchedulesAction
	51,  // 50: CarServer.VehicleAction.batchRemoveChargeSchedulesAction:type_name -> CarServer.BatchRemoveChargeSchedulesAction
	10,  // 51: CarServer.Response.actionStatus:type_name -> CarServer.ActionStatus
	69,  // 52: CarServer.Response.getSessionInfoResponse:type_name -> Signatures.SessionInfo
	25,  // 53: CarServer.Response.getNearbyChargingSites:type_name -> CarServer.NearbyChargingSites
	45,  // 54: CarServer.Response.ping:type_name -> CarServer.Ping
	0,   // 55: CarServer.ActionStatus.result:type_name -> CarServer.OperationStatus_E
	11,  // 56: CarServer.ActionStatus.result_reason:type_name -> CarServer.ResultReason
	70,  // 57: CarServer.ChargingStartStopAction.unknown:type_name -> CarServer.Void
	70,  // 58: CarServer.ChargingStartStopAction.start:type_name -> CarServer.Void
	70,  // 59: CarServer.ChargingStartStopAction.start_standard:type_name -> CarServer.Void
	70,  // 60: CarServer.ChargingStartStopAction.start_max_range:type_name -> CarServer.Void
	70,  // 61: CarServer.ChargingStartStopAction.stop:type_name -> CarServer.Void
	61,  // 62: CarServer.HvacSeatHeaterActions.hvacSeatHeaterAction:type_name -> CarServer.HvacSeatHeaterActions.HvacSeatHeaterAction
	62,  // 63: CarServer.HvacSeatCoolerActions.hvacSeatCoolerAction:type_name -> CarServer.HvacSeatCoolerActions.HvacSeatCoolerAction
	3,   // 64: CarServer.HvacSetPreconditioningMaxAction.manual_override_mode:type_name -> CarServer.HvacSetPreconditioningMaxAction.ManualOverrideMode_E
	63,  // 65: CarServer.HvacTemperatureAdjustmentAction.level:type_name -> CarServer.HvacTemperatureAdjustmentAction.Temperature
	64,  // 66: CarServer.HvacTemperatureAdjustmentAction.hvac_temperature_zone:type_name -> CarServer.HvacTemperatureAdjustmentAction.HvacTemperatureZone
	71,  // 67: CarServer.NearbyChargingSites.timestamp:type_name -> google.protobuf.Timestamp
	26,  // 68: CarServer.NearbyChargingSites.superchargers:type_name -> CarServer.Superchargers
	72,  // 69: CarServer.Superchargers.location:type_name -> CarServer.LatLong
	70,  // 70: CarServer.VehicleControlSunroofOpenCloseAction.vent:type_name -> CarServer.Void
	70,  // 71: CarServer.VehicleControlSunroofOpenCloseAction.close:type_name -> CarServer.Void
	70,  // 72: CarServer.VehicleControlSunroofOpenCloseAction.open:type_name -> CarServer.Void
	72,  // 73: CarServer.VehicleControlTriggerHomelinkAction.location:type_name -> CarServer.LatLong
	70,  // 74: CarServer.VehicleControlWindowAction.unknown:type_name -> CarServer.Void
	70,  // 75: CarServer.VehicleControlWindowAction.vent:type_name -> CarServer.Void
	70,  // 76: CarServer.VehicleControlWindowAction.close:type_name -> CarServer.Void
	65,  // 77: CarServer.AutoSeatClimateAction.carseat:type_name -> CarServer.AutoSeatClimateAction.CarSeat
	71,  // 78: CarServer.Ping.local_timestamp:type_name -> google.protobuf.Timestamp
	71,  // 79: CarServer.Ping.last_remote_timestamp:type_name -> google.protobuf.Timestamp
	73,  // 80: CarServer.ScheduledDepartureAction.preconditioning_times:type_name -> CarServer.PreconditioningTimes
	74,  // 81: CarServer.ScheduledDepartureAction.off_peak_charging_times:type_name -> CarServer.OffPeakChargingTimes
	5,   // 82: CarServer.HvacClimateKeeperAction.ClimateKeeperAction:type_name -> CarServer.HvacClimateKeeperAction.ClimateKeeperAction_E
	75,  // 83: CarServer.SetCopTempAction.copActivationTemp:type_name -> CarServer.ClimateState.CopActivationTemp
	70,  // 84: CarServer.HvacSeatHeaterActions.HvacSeatHeaterAction.SEAT_HEATER_UNKNOWN:type_name -> CarServer.Void
	70,  // 85: CarServer.HvacSeatHeaterActions.HvacSeatHeaterAction.SEAT_HEATER_OFF:type_name -> CarServer.Void
	70,  // 86: CarServer.HvacSeatHeaterActions.HvacSeatHeaterAction.SEAT_HEATER_LOW:type_name -> CarServer.Void
	70,  // 87: CarServer.HvacSeatHeaterActions.HvacSeatHeaterAction.SEAT_HEATER_MED:type_name -> CarServer.Void
	70,  // 88: CarServer.HvacSeatHeaterActions.HvacSeatHeaterAction.SEAT_HEATER_HIGH:type_name -> CarServer.Void
	70,  // 89: CarServer.HvacSeatHeaterActions.HvacSeatHeaterAction.CAR_SEAT_UNKNOWN:type_name -> CarServer.Void
	70,  // 90: CarServer.HvacSeatHeaterActions.HvacSeatHeaterAction.CAR_SEAT_FRONT_LEFT:type_name -> CarServer.Void
	70,  // 91: CarServer.HvacSeatHeaterActions.HvacSeatHeaterAction.CAR_SEAT_FRONT_RIGHT:type_name -> CarServer.Void
	70,  // 92: CarServer.HvacSeatHeaterActions.HvacSeatHeaterAction.CAR_SEAT_REAR_LEFT:type_name -> CarServer.Void
	70,  // 93: CarServer.HvacSeatHeaterActions.HvacSeatHeaterAction.CAR_SEAT_REAR_LEFT_BACK:type_name -> CarServer.Void
	70,  // 94: CarServer.HvacSeatHeaterActions.HvacSeatHeaterAction.CAR_SEAT_REAR_CENTER:type_name -> CarServer.Void
	70,  // 95: CarServer.HvacSeatHeaterActions.HvacSeatHeaterAction.CAR_SEAT_REAR_RIGHT:type_name -> CarServer.Void
	70,  // 96: CarServer.HvacSeatHeaterActions.HvacSeatHeaterAction.CAR_SEAT_REAR_RIGHT_BACK:type_name -> CarServer.Void
	70,  // 97: CarServer.HvacSeatHeaterActions.HvacSeatHeaterAction.CAR_SEAT_THIRD_ROW_LEFT:type_name -> CarServer.Void
	70,  // 98: CarServer.HvacSeatHeaterActions.HvacSeatHeaterAction.CAR_SEAT_THIRD_ROW_RIGHT:type_name -> CarServer.Void
	1,   // 99: CarServer.HvacSeatCoolerActions.HvacSeatCoolerAction.seat_cooler_level:type_name -> CarServer.HvacSeatCoolerActions.HvacSeatCoolerLevel_E
	2,   // 100: CarServer.HvacSeatCoolerActions.HvacSeatCoolerAction.seat_position:type_name -> CarServer.HvacSeatCoolerActions.HvacSeatCoolerPosition_E
	70,  // 101: CarServer.HvacTemperatureAdjustmentAction.Temperature.TEMP_UNKNOWN:type_name -> CarServer.Void
	70,  // 102: CarServer.HvacTemperatureAdjustmentAction.Temperature.TEMP_MIN:type_name -> CarServer.Void
	70,  // 103: CarServer.HvacTemperatureAdjustmentAction.Temperature.TEMP_MAX:type_name -> CarServer.Void
	70,  // 104: CarServer.HvacTemperatureAdjustmentAction.HvacTemperatureZone.TEMP_ZONE_UNKNOWN:type_name -> CarServer.Void
	70,  // 105: CarServer.HvacTemperatureAdjustmentAction.HvacTemperatureZone.TEMP_ZONE_FRONT_LEFT:type_name -> CarServer.Void
	70,  // 106: CarServer.HvacTemperatureAdjustmentAction.HvacTemperatureZone.TEMP_ZONE_FRONT_RIGHT:type_name -> CarServer.Void
	70,  // 107: CarServer.HvacTemperatureAdjustmentAction.HvacTemperatureZone.TEMP_ZONE_REAR:type_name -> CarServer.Void
	4,   // 108: CarServer.AutoSeatClimateAction.CarSeat.seat_position:type_name -> CarServer.AutoSeatClimateAction.AutoSeatPosition_E
	109, // [109:109] is the sub-list for method output_type
	109, // [109:109] is the sub-list for method input_type
	109, // [109:109] is the sub-list for extension type_name
	109, // [109:109] is the sub-list for extension extendee
	0,   // [0:109] is the sub-list for field type_name
}

func init() { file_car_server_proto_init() }
func file_car_server_proto_init() {
	if File_car_server_proto != nil {
		return
	}
	file_vehicle_proto_init()
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_car_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EraseUserDataAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultReason); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargingSetLimitAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargingStartStopAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrivingClearSpeedLimitPinAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrivingSetSpeedLimitAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DrivingSpeedLimitAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HvacAutoAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HvacSeatHeaterActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HvacSeatCoolerActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HvacSetPreconditioningMaxAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HvacSteeringWheelHeaterAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HvacTemperatureAdjustmentAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNearbyChargingSites); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NearbyChargingSites); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Superchargers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaPlayAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaUpdateVolume); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaNextFavorite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaPreviousFavorite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaNextTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MediaPreviousTrack); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleControlCancelSoftwareUpdateAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleControlFlashLightsAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleControlHonkHornAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleControlResetValetPinAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleControlScheduleSoftwareUpdateAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleControlSetSentryModeAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleControlSetValetModeAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleControlSunroofOpenCloseAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleControlTriggerHomelinkAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleControlWindowAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HvacBioweaponModeAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoSeatClimateAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Ping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledChargingAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScheduledDepartureAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HvacClimateKeeperAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChargingAmpsAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveChargeScheduleAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchRemoveChargeSchedulesAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchRemovePreconditionSchedulesAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovePreconditionScheduleAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCabinOverheatProtectionAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetVehicleNameAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargePortDoorClose); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargePortDoorOpen); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetCopTempAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleControlSetPinToDriveAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleControlResetPinToDriveAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HvacSeatHeaterActions_HvacSeatHeaterAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HvacSeatCoolerActions_HvacSeatCoolerAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HvacTemperatureAdjustmentAction_Temperature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HvacTemperatureAdjustmentAction_HvacTemperatureZone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_car_server_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AutoSeatClimateAction_CarSeat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_car_server_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Action_VehicleAction)(nil),
	}
	file_car_server_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*VehicleAction_ChargingSetLimitAction)(nil),
		(*VehicleAction_ChargingStartStopAction)(nil),
		(*VehicleAction_DrivingClearSpeedLimitPinAction)(nil),
		(*VehicleAction_DrivingSetSpeedLimitAction)(nil),
		(*VehicleAction_DrivingSpeedLimitAction)(nil),
		(*VehicleAction_HvacAutoAction)(nil),
		(*VehicleAction_HvacSetPreconditioningMaxAction)(nil),
		(*VehicleAction_HvacSteeringWheelHeaterAction)(nil),
		(*VehicleAction_HvacTemperatureAdjustmentAction)(nil),
		(*VehicleAction_MediaPlayAction)(nil),
		(*VehicleAction_MediaUpdateVolume)(nil),
		(*VehicleAction_MediaNextFavorite)(nil),
		(*VehicleAction_MediaPreviousFavorite)(nil),
		(*VehicleAction_MediaNextTrack)(nil),
		(*VehicleAction_MediaPreviousTrack)(nil),
		(*VehicleAction_GetNearbyChargingSites)(nil),
		(*VehicleAction_VehicleControlCancelSoftwareUpdateAction)(nil),
		(*VehicleAction_VehicleControlFlashLightsAction)(nil),
		(*VehicleAction_VehicleControlHonkHornAction)(nil),
		(*VehicleAction_VehicleControlResetValetPinAction)(nil),
		(*VehicleAction_VehicleControlScheduleSoftwareUpdateAction)(nil),
		(*VehicleAction_VehicleControlSetSentryModeAction)(nil),
		(*VehicleAction_VehicleControlSetValetModeAction)(nil),
		(*VehicleAction_VehicleControlSunroofOpenCloseAction)(nil),
		(*VehicleAction_VehicleControlTriggerHomelinkAction)(nil),
		(*VehicleAction_VehicleControlWindowAction)(nil),
		(*VehicleAction_HvacBioweaponModeAction)(nil),
		(*VehicleAction_HvacSeatHeaterActions)(nil),
		(*VehicleAction_ScheduledChargingAction)(nil),
		(*VehicleAction_ScheduledDepartureAction)(nil),
		(*VehicleAction_SetChargingAmpsAction)(nil),
		(*VehicleAction_HvacClimateKeeperAction)(nil),
		(*VehicleAction_Ping)(nil),
		(*VehicleAction_AutoSeatClimateAction)(nil),
		(*VehicleAction_HvacSeatCoolerActions)(nil),
		(*VehicleAction_SetCabinOverheatProtectionAction)(nil),
		(*VehicleAction_SetVehicleNameAction)(nil),
		(*VehicleAction_ChargePortDoorClose)(nil),
		(*VehicleAction_ChargePortDoorOpen)(nil),
		(*VehicleAction_GuestModeAction)(nil),
		(*VehicleAction_SetCopTempAction)(nil),
		(*VehicleAction_EraseUserDataAction)(nil),
		(*VehicleAction_VehicleControlSetPinToDriveAction)(nil),
		(*VehicleAction_VehicleControlResetPinToDriveAction)(nil),
		(*VehicleAction_AddChargeScheduleAction)(nil),
		(*VehicleAction_RemoveChargeScheduleAction)(nil),
		(*VehicleAction_AddPreconditionScheduleAction)(nil),
		(*VehicleAction_RemovePreconditionScheduleAction)(nil),
		(*VehicleAction_BatchRemovePreconditionSchedulesAction)(nil),
		(*VehicleAction_BatchRemoveChargeSchedulesAction)(nil),
	}
	file_car_server_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Response_GetSessionInfoResponse)(nil),
		(*Response_GetNearbyChargingSites)(nil),
		(*Response_Ping)(nil),
	}
	file_car_server_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ResultReason_PlainText)(nil),
	}
	file_car_server_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ChargingStartStopAction_Unknown)(nil),
		(*ChargingStartStopAction_Start)(nil),
		(*ChargingStartStopAction_StartStandard)(nil),
		(*ChargingStartStopAction_StartMaxRange)(nil),
		(*ChargingStartStopAction_Stop)(nil),
	}
	file_car_server_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*MediaUpdateVolume_VolumeDelta)(nil),
		(*MediaUpdateVolume_VolumeAbsoluteFloat)(nil),
	}
	file_car_server_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*VehicleControlSunroofOpenCloseAction_AbsoluteLevel)(nil),
		(*VehicleControlSunroofOpenCloseAction_DeltaLevel)(nil),
		(*VehicleControlSunroofOpenCloseAction_Vent)(nil),
		(*VehicleControlSunroofOpenCloseAction_Close)(nil),
		(*VehicleControlSunroofOpenCloseAction_Open)(nil),
	}
	file_car_server_proto_msgTypes[36].OneofWrappers = []interface{}{
		(*VehicleControlWindowAction_Unknown)(nil),
		(*VehicleControlWindowAction_Vent)(nil),
		(*VehicleControlWindowAction_Close)(nil),
	}
	file_car_server_proto_msgTypes[55].OneofWrappers = []interface{}{
		(*HvacSeatHeaterActions_HvacSeatHeaterAction_SEAT_HEATER_UNKNOWN)(nil),
		(*HvacSeatHeaterActions_HvacSeatHeaterAction_SEAT_HEATER_OFF)(nil),
		(*HvacSeatHeaterActions_HvacSeatHeaterAction_SEAT_HEATER_LOW)(nil),
		(*HvacSeatHeaterActions_HvacSeatHeaterAction_SEAT_HEATER_MED)(nil),
		(*HvacSeatHeaterActions_HvacSeatHeaterAction_SEAT_HEATER_HIGH)(nil),
		(*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_UNKNOWN)(nil),
		(*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_FRONT_LEFT)(nil),
		(*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_FRONT_RIGHT)(nil),
		(*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_REAR_LEFT)(nil),
		(*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_REAR_LEFT_BACK)(nil),
		(*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_REAR_CENTER)(nil),
		(*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_REAR_RIGHT)(nil),
		(*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_REAR_RIGHT_BACK)(nil),
		(*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_THIRD_ROW_LEFT)(nil),
		(*HvacSeatHeaterActions_HvacSeatHeaterAction_CAR_SEAT_THIRD_ROW_RIGHT)(nil),
	}
	file_car_server_proto_msgTypes[57].OneofWrappers = []interface{}{
		(*HvacTemperatureAdjustmentAction_Temperature_TEMP_UNKNOWN)(nil),
		(*HvacTemperatureAdjustmentAction_Temperature_TEMP_MIN)(nil),
		(*HvacTemperatureAdjustmentAction_Temperature_TEMP_MAX)(nil),
	}
	file_car_server_proto_msgTypes[58].OneofWrappers = []interface{}{
		(*HvacTemperatureAdjustmentAction_HvacTemperatureZone_TEMP_ZONE_UNKNOWN)(nil),
		(*HvacTemperatureAdjustmentAction_HvacTemperatureZone_TEMP_ZONE_FRONT_LEFT)(nil),
		(*HvacTemperatureAdjustmentAction_HvacTemperatureZone_TEMP_ZONE_FRONT_RIGHT)(nil),
		(*HvacTemperatureAdjustmentAction_HvacTemperatureZone_TEMP_ZONE_REAR)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_car_server_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_car_server_proto_goTypes,
		DependencyIndexes: file_car_server_proto_depIdxs,
		EnumInfos:         file_car_server_proto_enumTypes,
		MessageInfos:      file_car_server_proto_msgTypes,
	}.Build()
	File_car_server_proto = out.File
	file_car_server_proto_rawDesc = nil
	file_car_server_proto_goTypes = nil
	file_car_server_proto_depIdxs = nil
}
