// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: universal_message.proto

package universalmessage

import (
	signatures "github.com/teslamotors/vehicle-command/pkg/protocol/protobuf/signatures"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Domain int32

const (
	Domain_DOMAIN_BROADCAST        Domain = 0
	Domain_DOMAIN_VEHICLE_SECURITY Domain = 2
	Domain_DOMAIN_INFOTAINMENT     Domain = 3
)

// Enum value maps for Domain.
var (
	Domain_name = map[int32]string{
		0: "DOMAIN_BROADCAST",
		2: "DOMAIN_VEHICLE_SECURITY",
		3: "DOMAIN_INFOTAINMENT",
	}
	Domain_value = map[string]int32{
		"DOMAIN_BROADCAST":        0,
		"DOMAIN_VEHICLE_SECURITY": 2,
		"DOMAIN_INFOTAINMENT":     3,
	}
)

func (x Domain) Enum() *Domain {
	p := new(Domain)
	*p = x
	return p
}

func (x Domain) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Domain) Descriptor() protoreflect.EnumDescriptor {
	return file_universal_message_proto_enumTypes[0].Descriptor()
}

func (Domain) Type() protoreflect.EnumType {
	return &file_universal_message_proto_enumTypes[0]
}

func (x Domain) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Domain.Descriptor instead.
func (Domain) EnumDescriptor() ([]byte, []int) {
	return file_universal_message_proto_rawDescGZIP(), []int{0}
}

type OperationStatus_E int32

const (
	OperationStatus_E_OPERATIONSTATUS_OK    OperationStatus_E = 0
	OperationStatus_E_OPERATIONSTATUS_WAIT  OperationStatus_E = 1
	OperationStatus_E_OPERATIONSTATUS_ERROR OperationStatus_E = 2
)

// Enum value maps for OperationStatus_E.
var (
	OperationStatus_E_name = map[int32]string{
		0: "OPERATIONSTATUS_OK",
		1: "OPERATIONSTATUS_WAIT",
		2: "OPERATIONSTATUS_ERROR",
	}
	OperationStatus_E_value = map[string]int32{
		"OPERATIONSTATUS_OK":    0,
		"OPERATIONSTATUS_WAIT":  1,
		"OPERATIONSTATUS_ERROR": 2,
	}
)

func (x OperationStatus_E) Enum() *OperationStatus_E {
	p := new(OperationStatus_E)
	*p = x
	return p
}

func (x OperationStatus_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationStatus_E) Descriptor() protoreflect.EnumDescriptor {
	return file_universal_message_proto_enumTypes[1].Descriptor()
}

func (OperationStatus_E) Type() protoreflect.EnumType {
	return &file_universal_message_proto_enumTypes[1]
}

func (x OperationStatus_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationStatus_E.Descriptor instead.
func (OperationStatus_E) EnumDescriptor() ([]byte, []int) {
	return file_universal_message_proto_rawDescGZIP(), []int{1}
}

type MessageFault_E int32

const (
	MessageFault_E_MESSAGEFAULT_ERROR_NONE                                 MessageFault_E = 0  // Request succeeded.
	MessageFault_E_MESSAGEFAULT_ERROR_BUSY                                 MessageFault_E = 1  // Required vehicle subsystem is busy. Try again.
	MessageFault_E_MESSAGEFAULT_ERROR_TIMEOUT                              MessageFault_E = 2  // Vehicle subsystem did not respond. Try again.
	MessageFault_E_MESSAGEFAULT_ERROR_UNKNOWN_KEY_ID                       MessageFault_E = 3  // Vehicle did not recognize the key used to authorize command. Make sure your key is paired with the vehicle.
	MessageFault_E_MESSAGEFAULT_ERROR_INACTIVE_KEY                         MessageFault_E = 4  // Key used to authorize command has been disabled.
	MessageFault_E_MESSAGEFAULT_ERROR_INVALID_SIGNATURE                    MessageFault_E = 5  // Command signature/MAC is incorrect. Use included session info to update session and try again.
	MessageFault_E_MESSAGEFAULT_ERROR_INVALID_TOKEN_OR_COUNTER             MessageFault_E = 6  // Command anti-replay counter has been used before. Use included session info to update session and try again.
	MessageFault_E_MESSAGEFAULT_ERROR_INSUFFICIENT_PRIVILEGES              MessageFault_E = 7  // User is not authorized to execute command. This can be because of the role or because of vehicle state.
	MessageFault_E_MESSAGEFAULT_ERROR_INVALID_DOMAINS                      MessageFault_E = 8  // Command was malformed or addressed to an unrecognized vehicle system. May indicate client error or older vehicle firmware.
	MessageFault_E_MESSAGEFAULT_ERROR_INVALID_COMMAND                      MessageFault_E = 9  // Unrecognized command. May indicate client error or unsupported vehicle firmware.
	MessageFault_E_MESSAGEFAULT_ERROR_DECODING                             MessageFault_E = 10 // Could not parse command. Indicates client error.
	MessageFault_E_MESSAGEFAULT_ERROR_INTERNAL                             MessageFault_E = 11 // Internal vehicle error. Try again. Most commonly encountered when the vehicle has not finished booting.
	MessageFault_E_MESSAGEFAULT_ERROR_WRONG_PERSONALIZATION                MessageFault_E = 12 // Command sent to wrong VIN.
	MessageFault_E_MESSAGEFAULT_ERROR_BAD_PARAMETER                        MessageFault_E = 13 // Command was malformed or used a deprecated parameter.
	MessageFault_E_MESSAGEFAULT_ERROR_KEYCHAIN_IS_FULL                     MessageFault_E = 14 // Vehicle's keychain is full. You must delete a key before you can add another.
	MessageFault_E_MESSAGEFAULT_ERROR_INCORRECT_EPOCH                      MessageFault_E = 15 // Session ID mismatch. Use included session info to update session and try again.
	MessageFault_E_MESSAGEFAULT_ERROR_IV_INCORRECT_LENGTH                  MessageFault_E = 16 // Initialization Value length is incorrect (AES-GCM must use 12-byte IVs). Indicates a client programming error.
	MessageFault_E_MESSAGEFAULT_ERROR_TIME_EXPIRED                         MessageFault_E = 17 // Command expired. Use included session info to determine if clocks have desynchronized and try again.
	MessageFault_E_MESSAGEFAULT_ERROR_NOT_PROVISIONED_WITH_IDENTITY        MessageFault_E = 18 // Vehicle has not been provisioned with a VIN and may require service.
	MessageFault_E_MESSAGEFAULT_ERROR_COULD_NOT_HASH_METADATA              MessageFault_E = 19 // Internal vehicle error.
	MessageFault_E_MESSAGEFAULT_ERROR_TIME_TO_LIVE_TOO_LONG                MessageFault_E = 20 // Vehicle rejected command because its expiration time was too far in the future. This is a security precaution.
	MessageFault_E_MESSAGEFAULT_ERROR_REMOTE_ACCESS_DISABLED               MessageFault_E = 21 // The vehicle owner has disabled Mobile access.
	MessageFault_E_MESSAGEFAULT_ERROR_REMOTE_SERVICE_ACCESS_DISABLED       MessageFault_E = 22 // The command was authorized with a Service key, but the vehicle has not been configured to permit remote service commands.
	MessageFault_E_MESSAGEFAULT_ERROR_COMMAND_REQUIRES_ACCOUNT_CREDENTIALS MessageFault_E = 23 // The command requires proof of Tesla account credentials but was not sent over a channel that provides this proof. Resend the command using Fleet API.
)

// Enum value maps for MessageFault_E.
var (
	MessageFault_E_name = map[int32]string{
		0:  "MESSAGEFAULT_ERROR_NONE",
		1:  "MESSAGEFAULT_ERROR_BUSY",
		2:  "MESSAGEFAULT_ERROR_TIMEOUT",
		3:  "MESSAGEFAULT_ERROR_UNKNOWN_KEY_ID",
		4:  "MESSAGEFAULT_ERROR_INACTIVE_KEY",
		5:  "MESSAGEFAULT_ERROR_INVALID_SIGNATURE",
		6:  "MESSAGEFAULT_ERROR_INVALID_TOKEN_OR_COUNTER",
		7:  "MESSAGEFAULT_ERROR_INSUFFICIENT_PRIVILEGES",
		8:  "MESSAGEFAULT_ERROR_INVALID_DOMAINS",
		9:  "MESSAGEFAULT_ERROR_INVALID_COMMAND",
		10: "MESSAGEFAULT_ERROR_DECODING",
		11: "MESSAGEFAULT_ERROR_INTERNAL",
		12: "MESSAGEFAULT_ERROR_WRONG_PERSONALIZATION",
		13: "MESSAGEFAULT_ERROR_BAD_PARAMETER",
		14: "MESSAGEFAULT_ERROR_KEYCHAIN_IS_FULL",
		15: "MESSAGEFAULT_ERROR_INCORRECT_EPOCH",
		16: "MESSAGEFAULT_ERROR_IV_INCORRECT_LENGTH",
		17: "MESSAGEFAULT_ERROR_TIME_EXPIRED",
		18: "MESSAGEFAULT_ERROR_NOT_PROVISIONED_WITH_IDENTITY",
		19: "MESSAGEFAULT_ERROR_COULD_NOT_HASH_METADATA",
		20: "MESSAGEFAULT_ERROR_TIME_TO_LIVE_TOO_LONG",
		21: "MESSAGEFAULT_ERROR_REMOTE_ACCESS_DISABLED",
		22: "MESSAGEFAULT_ERROR_REMOTE_SERVICE_ACCESS_DISABLED",
		23: "MESSAGEFAULT_ERROR_COMMAND_REQUIRES_ACCOUNT_CREDENTIALS",
	}
	MessageFault_E_value = map[string]int32{
		"MESSAGEFAULT_ERROR_NONE":                                 0,
		"MESSAGEFAULT_ERROR_BUSY":                                 1,
		"MESSAGEFAULT_ERROR_TIMEOUT":                              2,
		"MESSAGEFAULT_ERROR_UNKNOWN_KEY_ID":                       3,
		"MESSAGEFAULT_ERROR_INACTIVE_KEY":                         4,
		"MESSAGEFAULT_ERROR_INVALID_SIGNATURE":                    5,
		"MESSAGEFAULT_ERROR_INVALID_TOKEN_OR_COUNTER":             6,
		"MESSAGEFAULT_ERROR_INSUFFICIENT_PRIVILEGES":              7,
		"MESSAGEFAULT_ERROR_INVALID_DOMAINS":                      8,
		"MESSAGEFAULT_ERROR_INVALID_COMMAND":                      9,
		"MESSAGEFAULT_ERROR_DECODING":                             10,
		"MESSAGEFAULT_ERROR_INTERNAL":                             11,
		"MESSAGEFAULT_ERROR_WRONG_PERSONALIZATION":                12,
		"MESSAGEFAULT_ERROR_BAD_PARAMETER":                        13,
		"MESSAGEFAULT_ERROR_KEYCHAIN_IS_FULL":                     14,
		"MESSAGEFAULT_ERROR_INCORRECT_EPOCH":                      15,
		"MESSAGEFAULT_ERROR_IV_INCORRECT_LENGTH":                  16,
		"MESSAGEFAULT_ERROR_TIME_EXPIRED":                         17,
		"MESSAGEFAULT_ERROR_NOT_PROVISIONED_WITH_IDENTITY":        18,
		"MESSAGEFAULT_ERROR_COULD_NOT_HASH_METADATA":              19,
		"MESSAGEFAULT_ERROR_TIME_TO_LIVE_TOO_LONG":                20,
		"MESSAGEFAULT_ERROR_REMOTE_ACCESS_DISABLED":               21,
		"MESSAGEFAULT_ERROR_REMOTE_SERVICE_ACCESS_DISABLED":       22,
		"MESSAGEFAULT_ERROR_COMMAND_REQUIRES_ACCOUNT_CREDENTIALS": 23,
	}
)

func (x MessageFault_E) Enum() *MessageFault_E {
	p := new(MessageFault_E)
	*p = x
	return p
}

func (x MessageFault_E) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageFault_E) Descriptor() protoreflect.EnumDescriptor {
	return file_universal_message_proto_enumTypes[2].Descriptor()
}

func (MessageFault_E) Type() protoreflect.EnumType {
	return &file_universal_message_proto_enumTypes[2]
}

func (x MessageFault_E) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageFault_E.Descriptor instead.
func (MessageFault_E) EnumDescriptor() ([]byte, []int) {
	return file_universal_message_proto_rawDescGZIP(), []int{2}
}

type Flags int32

const (
	Flags_FLAG_USER_COMMAND Flags = 0
)

// Enum value maps for Flags.
var (
	Flags_name = map[int32]string{
		0: "FLAG_USER_COMMAND",
	}
	Flags_value = map[string]int32{
		"FLAG_USER_COMMAND": 0,
	}
)

func (x Flags) Enum() *Flags {
	p := new(Flags)
	*p = x
	return p
}

func (x Flags) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Flags) Descriptor() protoreflect.EnumDescriptor {
	return file_universal_message_proto_enumTypes[3].Descriptor()
}

func (Flags) Type() protoreflect.EnumType {
	return &file_universal_message_proto_enumTypes[3]
}

func (x Flags) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Flags.Descriptor instead.
func (Flags) EnumDescriptor() ([]byte, []int) {
	return file_universal_message_proto_rawDescGZIP(), []int{3}
}

type Destination struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SubDestination:
	//
	//	*Destination_Domain
	//	*Destination_RoutingAddress
	SubDestination isDestination_SubDestination `protobuf_oneof:"sub_destination"`
}

func (x *Destination) Reset() {
	*x = Destination{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universal_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Destination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Destination) ProtoMessage() {}

func (x *Destination) ProtoReflect() protoreflect.Message {
	mi := &file_universal_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Destination.ProtoReflect.Descriptor instead.
func (*Destination) Descriptor() ([]byte, []int) {
	return file_universal_message_proto_rawDescGZIP(), []int{0}
}

func (m *Destination) GetSubDestination() isDestination_SubDestination {
	if m != nil {
		return m.SubDestination
	}
	return nil
}

func (x *Destination) GetDomain() Domain {
	if x, ok := x.GetSubDestination().(*Destination_Domain); ok {
		return x.Domain
	}
	return Domain_DOMAIN_BROADCAST
}

func (x *Destination) GetRoutingAddress() []byte {
	if x, ok := x.GetSubDestination().(*Destination_RoutingAddress); ok {
		return x.RoutingAddress
	}
	return nil
}

type isDestination_SubDestination interface {
	isDestination_SubDestination()
}

type Destination_Domain struct {
	Domain Domain `protobuf:"varint,1,opt,name=domain,proto3,enum=UniversalMessage.Domain,oneof"`
}

type Destination_RoutingAddress struct {
	RoutingAddress []byte `protobuf:"bytes,2,opt,name=routing_address,json=routingAddress,proto3,oneof"`
}

func (*Destination_Domain) isDestination_SubDestination() {}

func (*Destination_RoutingAddress) isDestination_SubDestination() {}

type MessageStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperationStatus    OperationStatus_E `protobuf:"varint,1,opt,name=operation_status,json=operationStatus,proto3,enum=UniversalMessage.OperationStatus_E" json:"operation_status,omitempty"`
	SignedMessageFault MessageFault_E    `protobuf:"varint,2,opt,name=signed_message_fault,json=signedMessageFault,proto3,enum=UniversalMessage.MessageFault_E" json:"signed_message_fault,omitempty"`
}

func (x *MessageStatus) Reset() {
	*x = MessageStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universal_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageStatus) ProtoMessage() {}

func (x *MessageStatus) ProtoReflect() protoreflect.Message {
	mi := &file_universal_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageStatus.ProtoReflect.Descriptor instead.
func (*MessageStatus) Descriptor() ([]byte, []int) {
	return file_universal_message_proto_rawDescGZIP(), []int{1}
}

func (x *MessageStatus) GetOperationStatus() OperationStatus_E {
	if x != nil {
		return x.OperationStatus
	}
	return OperationStatus_E_OPERATIONSTATUS_OK
}

func (x *MessageStatus) GetSignedMessageFault() MessageFault_E {
	if x != nil {
		return x.SignedMessageFault
	}
	return MessageFault_E_MESSAGEFAULT_ERROR_NONE
}

type SessionInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Challenge []byte `protobuf:"bytes,2,opt,name=challenge,proto3" json:"challenge,omitempty"`
}

func (x *SessionInfoRequest) Reset() {
	*x = SessionInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universal_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionInfoRequest) ProtoMessage() {}

func (x *SessionInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_universal_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionInfoRequest.ProtoReflect.Descriptor instead.
func (*SessionInfoRequest) Descriptor() ([]byte, []int) {
	return file_universal_message_proto_rawDescGZIP(), []int{2}
}

func (x *SessionInfoRequest) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *SessionInfoRequest) GetChallenge() []byte {
	if x != nil {
		return x.Challenge
	}
	return nil
}

type RoutableMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ToDestination   *Destination `protobuf:"bytes,6,opt,name=to_destination,json=toDestination,proto3" json:"to_destination,omitempty"`
	FromDestination *Destination `protobuf:"bytes,7,opt,name=from_destination,json=fromDestination,proto3" json:"from_destination,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*RoutableMessage_ProtobufMessageAsBytes
	//	*RoutableMessage_SessionInfoRequest
	//	*RoutableMessage_SessionInfo
	Payload isRoutableMessage_Payload `protobuf_oneof:"payload"`
	// Types that are assignable to SubSigData:
	//
	//	*RoutableMessage_SignatureData
	SubSigData          isRoutableMessage_SubSigData `protobuf_oneof:"sub_sigData"`
	SignedMessageStatus *MessageStatus               `protobuf:"bytes,12,opt,name=signedMessageStatus,proto3" json:"signedMessageStatus,omitempty"`
	RequestUuid         []byte                       `protobuf:"bytes,50,opt,name=request_uuid,json=requestUuid,proto3" json:"request_uuid,omitempty"`
	Uuid                []byte                       `protobuf:"bytes,51,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Flags               uint32                       `protobuf:"varint,52,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *RoutableMessage) Reset() {
	*x = RoutableMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_universal_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoutableMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutableMessage) ProtoMessage() {}

func (x *RoutableMessage) ProtoReflect() protoreflect.Message {
	mi := &file_universal_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutableMessage.ProtoReflect.Descriptor instead.
func (*RoutableMessage) Descriptor() ([]byte, []int) {
	return file_universal_message_proto_rawDescGZIP(), []int{3}
}

func (x *RoutableMessage) GetToDestination() *Destination {
	if x != nil {
		return x.ToDestination
	}
	return nil
}

func (x *RoutableMessage) GetFromDestination() *Destination {
	if x != nil {
		return x.FromDestination
	}
	return nil
}

func (m *RoutableMessage) GetPayload() isRoutableMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *RoutableMessage) GetProtobufMessageAsBytes() []byte {
	if x, ok := x.GetPayload().(*RoutableMessage_ProtobufMessageAsBytes); ok {
		return x.ProtobufMessageAsBytes
	}
	return nil
}

func (x *RoutableMessage) GetSessionInfoRequest() *SessionInfoRequest {
	if x, ok := x.GetPayload().(*RoutableMessage_SessionInfoRequest); ok {
		return x.SessionInfoRequest
	}
	return nil
}

func (x *RoutableMessage) GetSessionInfo() []byte {
	if x, ok := x.GetPayload().(*RoutableMessage_SessionInfo); ok {
		return x.SessionInfo
	}
	return nil
}

func (m *RoutableMessage) GetSubSigData() isRoutableMessage_SubSigData {
	if m != nil {
		return m.SubSigData
	}
	return nil
}

func (x *RoutableMessage) GetSignatureData() *signatures.SignatureData {
	if x, ok := x.GetSubSigData().(*RoutableMessage_SignatureData); ok {
		return x.SignatureData
	}
	return nil
}

func (x *RoutableMessage) GetSignedMessageStatus() *MessageStatus {
	if x != nil {
		return x.SignedMessageStatus
	}
	return nil
}

func (x *RoutableMessage) GetRequestUuid() []byte {
	if x != nil {
		return x.RequestUuid
	}
	return nil
}

func (x *RoutableMessage) GetUuid() []byte {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *RoutableMessage) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

type isRoutableMessage_Payload interface {
	isRoutableMessage_Payload()
}

type RoutableMessage_ProtobufMessageAsBytes struct {
	ProtobufMessageAsBytes []byte `protobuf:"bytes,10,opt,name=protobuf_message_as_bytes,json=protobufMessageAsBytes,proto3,oneof"`
}

type RoutableMessage_SessionInfoRequest struct {
	SessionInfoRequest *SessionInfoRequest `protobuf:"bytes,14,opt,name=session_info_request,json=sessionInfoRequest,proto3,oneof"`
}

type RoutableMessage_SessionInfo struct {
	SessionInfo []byte `protobuf:"bytes,15,opt,name=session_info,json=sessionInfo,proto3,oneof"`
}

func (*RoutableMessage_ProtobufMessageAsBytes) isRoutableMessage_Payload() {}

func (*RoutableMessage_SessionInfoRequest) isRoutableMessage_Payload() {}

func (*RoutableMessage_SessionInfo) isRoutableMessage_Payload() {}

type isRoutableMessage_SubSigData interface {
	isRoutableMessage_SubSigData()
}

type RoutableMessage_SignatureData struct {
	SignatureData *signatures.SignatureData `protobuf:"bytes,13,opt,name=signature_data,json=signatureData,proto3,oneof"`
}

func (*RoutableMessage_SignatureData) isRoutableMessage_SubSigData() {}

var File_universal_message_proto protoreflect.FileDescriptor

var file_universal_message_proto_rawDesc = []byte{
	0x0a, 0x17, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x10, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7f, 0x0a,
	0x0b, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x55,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x12, 0x29, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x6f, 0x75,
	0x74, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42, 0x11, 0x0a, 0x0f, 0x73,
	0x75, 0x62, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb3,
	0x01, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x4e, 0x0a, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x55, 0x6e, 0x69,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x45, 0x52,
	0x0f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x52, 0x0a, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x5f, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20,
	0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x45,
	0x52, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x22, 0x51, 0x0a, 0x12, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x22, 0xed, 0x04, 0x0a, 0x0f, 0x52, 0x6f, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x44, 0x0a, 0x0e, 0x74,
	0x6f, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0d, 0x74, 0x6f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x48, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0f, 0x66, 0x72, 0x6f, 0x6d,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3b, 0x0a, 0x19, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x61, 0x73, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x41, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x58, 0x0a, 0x14, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x42, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x13, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x55, 0x6e, 0x69, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x21,
	0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x18, 0x34,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x5f, 0x73, 0x69,
	0x67, 0x44, 0x61, 0x74, 0x61, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x06, 0x4a, 0x04, 0x08, 0x10, 0x10,
	0x29, 0x4a, 0x04, 0x08, 0x0b, 0x10, 0x0c, 0x2a, 0x54, 0x0a, 0x06, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x42, 0x52, 0x4f, 0x41,
	0x44, 0x43, 0x41, 0x53, 0x54, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x4f, 0x4d, 0x41, 0x49,
	0x4e, 0x5f, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x55, 0x52, 0x49,
	0x54, 0x59, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x5f, 0x49,
	0x4e, 0x46, 0x4f, 0x54, 0x41, 0x49, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x03, 0x2a, 0x60, 0x0a,
	0x11, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x45, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53,
	0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x4b, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x57, 0x41,
	0x49, 0x54, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x2a,
	0x80, 0x08, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x5f, 0x45, 0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12,
	0x1b, 0x0a, 0x17, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x12, 0x25, 0x0a, 0x21,
	0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x49,
	0x44, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x04, 0x12, 0x28, 0x0a, 0x24, 0x4d, 0x45, 0x53, 0x53,
	0x41, 0x47, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x54, 0x55, 0x52, 0x45,
	0x10, 0x05, 0x12, 0x2f, 0x0a, 0x2b, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x54, 0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x45,
	0x52, 0x10, 0x06, 0x12, 0x2e, 0x0a, 0x2a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x53, 0x55, 0x46, 0x46,
	0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x49, 0x4c, 0x45, 0x47, 0x45,
	0x53, 0x10, 0x07, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x44, 0x4f, 0x4d, 0x41, 0x49, 0x4e, 0x53, 0x10, 0x08, 0x12, 0x26, 0x0a, 0x22, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e,
	0x44, 0x10, 0x09, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x44, 0x49,
	0x4e, 0x47, 0x10, 0x0a, 0x12, 0x1f, 0x0a, 0x1b, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x46,
	0x41, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x10, 0x0b, 0x12, 0x2c, 0x0a, 0x28, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x57, 0x52, 0x4f, 0x4e,
	0x47, 0x5f, 0x50, 0x45, 0x52, 0x53, 0x4f, 0x4e, 0x41, 0x4c, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x0c, 0x12, 0x24, 0x0a, 0x20, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x46, 0x41,
	0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x42, 0x41, 0x44, 0x5f, 0x50, 0x41,
	0x52, 0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x10, 0x0d, 0x12, 0x27, 0x0a, 0x23, 0x4d, 0x45, 0x53,
	0x53, 0x41, 0x47, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f,
	0x4b, 0x45, 0x59, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x53, 0x5f, 0x46, 0x55, 0x4c, 0x4c,
	0x10, 0x0e, 0x12, 0x26, 0x0a, 0x22, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45,
	0x43, 0x54, 0x5f, 0x45, 0x50, 0x4f, 0x43, 0x48, 0x10, 0x0f, 0x12, 0x2a, 0x0a, 0x26, 0x4d, 0x45,
	0x53, 0x53, 0x41, 0x47, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x5f, 0x49, 0x56, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x52, 0x52, 0x45, 0x43, 0x54, 0x5f, 0x4c, 0x45,
	0x4e, 0x47, 0x54, 0x48, 0x10, 0x10, 0x12, 0x23, 0x0a, 0x1f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47,
	0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x45, 0x58, 0x50, 0x49, 0x52, 0x45, 0x44, 0x10, 0x11, 0x12, 0x34, 0x0a, 0x30, 0x4d,
	0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x53, 0x49, 0x4f, 0x4e, 0x45,
	0x44, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x54, 0x59, 0x10,
	0x12, 0x12, 0x2e, 0x0a, 0x2a, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4c, 0x44, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44, 0x41, 0x54, 0x41, 0x10,
	0x13, 0x12, 0x2c, 0x0a, 0x28, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x54, 0x4f, 0x5f,
	0x4c, 0x49, 0x56, 0x45, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4c, 0x4f, 0x4e, 0x47, 0x10, 0x14, 0x12,
	0x2d, 0x0a, 0x29, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x41, 0x43, 0x43,
	0x45, 0x53, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x15, 0x12, 0x35,
	0x0a, 0x31, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x44, 0x10, 0x16, 0x12, 0x3b, 0x0a, 0x37, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45,
	0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x41, 0x4e, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45, 0x53, 0x5f, 0x41, 0x43, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x43, 0x52, 0x45, 0x44, 0x45, 0x4e, 0x54, 0x49, 0x41, 0x4c, 0x53,
	0x10, 0x17, 0x2a, 0x1e, 0x0a, 0x05, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x15, 0x0a, 0x11, 0x46,
	0x4c, 0x41, 0x47, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x43, 0x4f, 0x4d, 0x4d, 0x41, 0x4e, 0x44,
	0x10, 0x00, 0x42, 0x75, 0x0a, 0x24, 0x63, 0x6f, 0x6d, 0x2e, 0x74, 0x65, 0x73, 0x6c, 0x61, 0x2e,
	0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x6c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5a, 0x4d, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x65, 0x73, 0x6c, 0x61, 0x6d, 0x6f, 0x74, 0x6f,
	0x72, 0x73, 0x2f, 0x76, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73,
	0x61, 0x6c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_universal_message_proto_rawDescOnce sync.Once
	file_universal_message_proto_rawDescData = file_universal_message_proto_rawDesc
)

func file_universal_message_proto_rawDescGZIP() []byte {
	file_universal_message_proto_rawDescOnce.Do(func() {
		file_universal_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_universal_message_proto_rawDescData)
	})
	return file_universal_message_proto_rawDescData
}

var file_universal_message_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_universal_message_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_universal_message_proto_goTypes = []interface{}{
	(Domain)(0),                      // 0: UniversalMessage.Domain
	(OperationStatus_E)(0),           // 1: UniversalMessage.OperationStatus_E
	(MessageFault_E)(0),              // 2: UniversalMessage.MessageFault_E
	(Flags)(0),                       // 3: UniversalMessage.Flags
	(*Destination)(nil),              // 4: UniversalMessage.Destination
	(*MessageStatus)(nil),            // 5: UniversalMessage.MessageStatus
	(*SessionInfoRequest)(nil),       // 6: UniversalMessage.SessionInfoRequest
	(*RoutableMessage)(nil),          // 7: UniversalMessage.RoutableMessage
	(*signatures.SignatureData)(nil), // 8: Signatures.SignatureData
}
var file_universal_message_proto_depIdxs = []int32{
	0, // 0: UniversalMessage.Destination.domain:type_name -> UniversalMessage.Domain
	1, // 1: UniversalMessage.MessageStatus.operation_status:type_name -> UniversalMessage.OperationStatus_E
	2, // 2: UniversalMessage.MessageStatus.signed_message_fault:type_name -> UniversalMessage.MessageFault_E
	4, // 3: UniversalMessage.RoutableMessage.to_destination:type_name -> UniversalMessage.Destination
	4, // 4: UniversalMessage.RoutableMessage.from_destination:type_name -> UniversalMessage.Destination
	6, // 5: UniversalMessage.RoutableMessage.session_info_request:type_name -> UniversalMessage.SessionInfoRequest
	8, // 6: UniversalMessage.RoutableMessage.signature_data:type_name -> Signatures.SignatureData
	5, // 7: UniversalMessage.RoutableMessage.signedMessageStatus:type_name -> UniversalMessage.MessageStatus
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_universal_message_proto_init() }
func file_universal_message_proto_init() {
	if File_universal_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_universal_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Destination); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universal_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universal_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_universal_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoutableMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_universal_message_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Destination_Domain)(nil),
		(*Destination_RoutingAddress)(nil),
	}
	file_universal_message_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*RoutableMessage_ProtobufMessageAsBytes)(nil),
		(*RoutableMessage_SessionInfoRequest)(nil),
		(*RoutableMessage_SessionInfo)(nil),
		(*RoutableMessage_SignatureData)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_universal_message_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_universal_message_proto_goTypes,
		DependencyIndexes: file_universal_message_proto_depIdxs,
		EnumInfos:         file_universal_message_proto_enumTypes,
		MessageInfos:      file_universal_message_proto_msgTypes,
	}.Build()
	File_universal_message_proto = out.File
	file_universal_message_proto_rawDesc = nil
	file_universal_message_proto_goTypes = nil
	file_universal_message_proto_depIdxs = nil
}
